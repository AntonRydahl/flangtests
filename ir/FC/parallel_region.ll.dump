*** IR Dump After Annotation2MetadataPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = constant ptr null

declare ptr @malloc(i64)

declare void @free(ptr)

define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  %3 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %4 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %5 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %6 = load i32, ptr %1, align 4, !tbaa !1
  %7 = call i1 @_FortranAioOutputInteger32(ptr %4, i32 %6)
  %8 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.2920697320, i64 5)
  %9 = load double, ptr %2, align 8, !tbaa !1
  %10 = call i1 @_FortranAioOutputReal64(ptr %4, double %9)
  %11 = call i32 @_FortranAioEndIoStatement(ptr %4)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %4 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %5 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %6 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %7 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %8 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %9 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, i64 1, align 8
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr null, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 0, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64)]] }, ptr %8, align 8, !tbaa !5
  %10 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %9, align 8, !tbaa !5
  %11 = alloca i32, i64 1, align 4
  %12 = alloca i32, i64 1, align 4
  %13 = alloca i32, i64 1, align 4
  %14 = alloca i32, i64 1, align 4
  %15 = alloca i32, i64 1, align 4
  %16 = alloca double, i64 1, align 8
  %17 = alloca i32, i64 1, align 4
  %18 = load i32, ptr %0, align 4, !tbaa !1
  %19 = sext i32 %18 to i64
  %20 = icmp sgt i64 %19, 0
  %21 = select i1 %20, i64 %19, i64 0
  %22 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %23 = call ptr @malloc(i64 %22)
  %24 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %21, 7, 0, 1
  %25 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %24, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %26 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %27 = mul i64 1, %21
  %28 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %25, ptr %23, 0
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %28, ptr %7, align 8, !tbaa !5
  %29 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %7, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %29, ptr %9, align 8, !tbaa !5
  store i32 0, ptr %15, align 4, !tbaa !1
  store i32 1, ptr %14, align 4, !tbaa !1
  %30 = load i32, ptr %0, align 4, !tbaa !1
  %31 = load i32, ptr %14, align 4, !tbaa !1
  %32 = sdiv i32 %30, %31
  store i32 %32, ptr %11, align 4, !tbaa !1
  %33 = load i32, ptr %15, align 4, !tbaa !1
  %34 = load i32, ptr %11, align 4, !tbaa !1
  %35 = mul i32 %33, %34
  %36 = add i32 %35, 1
  store i32 %36, ptr %12, align 4, !tbaa !1
  %37 = load i32, ptr %15, align 4, !tbaa !1
  %38 = load i32, ptr %14, align 4, !tbaa !1
  %39 = sub i32 %38, 1
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %2
  %42 = load i32, ptr %0, align 4, !tbaa !1
  store i32 %42, ptr %17, align 4, !tbaa !1
  br label %47

43:                                               ; preds = %2
  %44 = load i32, ptr %12, align 4, !tbaa !1
  %45 = load i32, ptr %11, align 4, !tbaa !1
  %46 = add i32 %44, %45
  store i32 %46, ptr %17, align 4, !tbaa !1
  br label %47

47:                                               ; preds = %41, %43
  %48 = load i32, ptr %12, align 4, !tbaa !1
  %49 = sext i32 %48 to i64
  %50 = load i32, ptr %17, align 4, !tbaa !1
  %51 = sext i32 %50 to i64
  %52 = trunc i64 %49 to i32
  %53 = sub i64 %51, %49
  %54 = add i64 %53, 1
  br label %55

55:                                               ; preds = %59, %47
  %56 = phi i32 [ %92, %59 ], [ %52, %47 ]
  %57 = phi i64 [ %93, %59 ], [ %54, %47 ]
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %59, label %94

59:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %60 = load i32, ptr %0, align 4, !tbaa !1
  %61 = sitofp i32 %60 to float
  %62 = fdiv contract float 1.000000e+00, %61
  %63 = fpext float %62 to double
  %64 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %64, ptr %6, align 8, !tbaa !5
  %65 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 0
  %66 = load i64, ptr %65, align 8, !tbaa !5
  %67 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 1
  %68 = load i64, ptr %67, align 8, !tbaa !5
  %69 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 2
  %70 = load i64, ptr %69, align 8, !tbaa !5
  %71 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = load i32, ptr %13, align 4, !tbaa !1
  %74 = sext i32 %73 to i64
  %75 = sub i64 %74, %66
  %76 = getelementptr double, ptr %72, i64 %75
  store double %63, ptr %76, align 8, !tbaa !1
  %77 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %77, ptr %5, align 8, !tbaa !5
  %78 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 0
  %79 = load i64, ptr %78, align 8, !tbaa !5
  %80 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 1
  %81 = load i64, ptr %80, align 8, !tbaa !5
  %82 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 2
  %83 = load i64, ptr %82, align 8, !tbaa !5
  %84 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load i32, ptr %13, align 4, !tbaa !1
  %87 = sext i32 %86 to i64
  %88 = sub i64 %87, %79
  %89 = getelementptr double, ptr %85, i64 %88
  %90 = load double, ptr %89, align 8, !tbaa !1
  store double %90, ptr %16, align 8, !tbaa !1
  %91 = load i32, ptr %13, align 4, !tbaa !1
  %92 = add i32 %91, 1
  %93 = sub i64 %57, 1
  br label %55

94:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %95 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %95, ptr %4, align 8, !tbaa !5
  %96 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 0
  %97 = load i64, ptr %96, align 8, !tbaa !5
  %98 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 1
  %99 = load i64, ptr %98, align 8, !tbaa !5
  %100 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 2
  %101 = load i64, ptr %100, align 8, !tbaa !5
  %102 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  %104 = sub i64 1, %97
  %105 = getelementptr double, ptr %103, i64 %104
  %106 = load double, ptr %105, align 8, !tbaa !1
  %107 = load i32, ptr %0, align 4, !tbaa !1
  %108 = sext i32 %107 to i64
  %109 = sub i64 %108, %97
  %110 = getelementptr double, ptr %103, i64 %109
  %111 = load double, ptr %110, align 8, !tbaa !1
  %112 = fadd contract double %106, %111
  store double %112, ptr %1, align 8, !tbaa !1
  %113 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %113, ptr %3, align 8, !tbaa !5
  %114 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %3, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8, !tbaa !5
  call void @free(ptr %115)
  %116 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %116, ptr %9, align 8, !tbaa !5
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32)

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64)

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32)

declare zeroext i1 @_FortranAioOutputReal64(ptr, double)

declare i32 @_FortranAioEndIoStatement(ptr)

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #0

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #0

attributes #0 = { nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = !{!6, !6, i64 0}
!6 = !{!"descriptor member", !3, i64 0}
*** IR Dump After ForceFunctionAttrsPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = constant ptr null

declare ptr @malloc(i64)

declare void @free(ptr)

define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  %3 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %4 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %5 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %6 = load i32, ptr %1, align 4, !tbaa !1
  %7 = call i1 @_FortranAioOutputInteger32(ptr %4, i32 %6)
  %8 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.2920697320, i64 5)
  %9 = load double, ptr %2, align 8, !tbaa !1
  %10 = call i1 @_FortranAioOutputReal64(ptr %4, double %9)
  %11 = call i32 @_FortranAioEndIoStatement(ptr %4)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %4 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %5 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %6 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %7 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %8 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %9 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, i64 1, align 8
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr null, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 0, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64)]] }, ptr %8, align 8, !tbaa !5
  %10 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %9, align 8, !tbaa !5
  %11 = alloca i32, i64 1, align 4
  %12 = alloca i32, i64 1, align 4
  %13 = alloca i32, i64 1, align 4
  %14 = alloca i32, i64 1, align 4
  %15 = alloca i32, i64 1, align 4
  %16 = alloca double, i64 1, align 8
  %17 = alloca i32, i64 1, align 4
  %18 = load i32, ptr %0, align 4, !tbaa !1
  %19 = sext i32 %18 to i64
  %20 = icmp sgt i64 %19, 0
  %21 = select i1 %20, i64 %19, i64 0
  %22 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %23 = call ptr @malloc(i64 %22)
  %24 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %21, 7, 0, 1
  %25 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %24, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %26 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %27 = mul i64 1, %21
  %28 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %25, ptr %23, 0
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %28, ptr %7, align 8, !tbaa !5
  %29 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %7, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %29, ptr %9, align 8, !tbaa !5
  store i32 0, ptr %15, align 4, !tbaa !1
  store i32 1, ptr %14, align 4, !tbaa !1
  %30 = load i32, ptr %0, align 4, !tbaa !1
  %31 = load i32, ptr %14, align 4, !tbaa !1
  %32 = sdiv i32 %30, %31
  store i32 %32, ptr %11, align 4, !tbaa !1
  %33 = load i32, ptr %15, align 4, !tbaa !1
  %34 = load i32, ptr %11, align 4, !tbaa !1
  %35 = mul i32 %33, %34
  %36 = add i32 %35, 1
  store i32 %36, ptr %12, align 4, !tbaa !1
  %37 = load i32, ptr %15, align 4, !tbaa !1
  %38 = load i32, ptr %14, align 4, !tbaa !1
  %39 = sub i32 %38, 1
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %2
  %42 = load i32, ptr %0, align 4, !tbaa !1
  store i32 %42, ptr %17, align 4, !tbaa !1
  br label %47

43:                                               ; preds = %2
  %44 = load i32, ptr %12, align 4, !tbaa !1
  %45 = load i32, ptr %11, align 4, !tbaa !1
  %46 = add i32 %44, %45
  store i32 %46, ptr %17, align 4, !tbaa !1
  br label %47

47:                                               ; preds = %41, %43
  %48 = load i32, ptr %12, align 4, !tbaa !1
  %49 = sext i32 %48 to i64
  %50 = load i32, ptr %17, align 4, !tbaa !1
  %51 = sext i32 %50 to i64
  %52 = trunc i64 %49 to i32
  %53 = sub i64 %51, %49
  %54 = add i64 %53, 1
  br label %55

55:                                               ; preds = %59, %47
  %56 = phi i32 [ %92, %59 ], [ %52, %47 ]
  %57 = phi i64 [ %93, %59 ], [ %54, %47 ]
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %59, label %94

59:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %60 = load i32, ptr %0, align 4, !tbaa !1
  %61 = sitofp i32 %60 to float
  %62 = fdiv contract float 1.000000e+00, %61
  %63 = fpext float %62 to double
  %64 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %64, ptr %6, align 8, !tbaa !5
  %65 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 0
  %66 = load i64, ptr %65, align 8, !tbaa !5
  %67 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 1
  %68 = load i64, ptr %67, align 8, !tbaa !5
  %69 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 2
  %70 = load i64, ptr %69, align 8, !tbaa !5
  %71 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = load i32, ptr %13, align 4, !tbaa !1
  %74 = sext i32 %73 to i64
  %75 = sub i64 %74, %66
  %76 = getelementptr double, ptr %72, i64 %75
  store double %63, ptr %76, align 8, !tbaa !1
  %77 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %77, ptr %5, align 8, !tbaa !5
  %78 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 0
  %79 = load i64, ptr %78, align 8, !tbaa !5
  %80 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 1
  %81 = load i64, ptr %80, align 8, !tbaa !5
  %82 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 2
  %83 = load i64, ptr %82, align 8, !tbaa !5
  %84 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load i32, ptr %13, align 4, !tbaa !1
  %87 = sext i32 %86 to i64
  %88 = sub i64 %87, %79
  %89 = getelementptr double, ptr %85, i64 %88
  %90 = load double, ptr %89, align 8, !tbaa !1
  store double %90, ptr %16, align 8, !tbaa !1
  %91 = load i32, ptr %13, align 4, !tbaa !1
  %92 = add i32 %91, 1
  %93 = sub i64 %57, 1
  br label %55

94:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %95 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %95, ptr %4, align 8, !tbaa !5
  %96 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 0
  %97 = load i64, ptr %96, align 8, !tbaa !5
  %98 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 1
  %99 = load i64, ptr %98, align 8, !tbaa !5
  %100 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 2
  %101 = load i64, ptr %100, align 8, !tbaa !5
  %102 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  %104 = sub i64 1, %97
  %105 = getelementptr double, ptr %103, i64 %104
  %106 = load double, ptr %105, align 8, !tbaa !1
  %107 = load i32, ptr %0, align 4, !tbaa !1
  %108 = sext i32 %107 to i64
  %109 = sub i64 %108, %97
  %110 = getelementptr double, ptr %103, i64 %109
  %111 = load double, ptr %110, align 8, !tbaa !1
  %112 = fadd contract double %106, %111
  store double %112, ptr %1, align 8, !tbaa !1
  %113 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %113, ptr %3, align 8, !tbaa !5
  %114 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %3, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8, !tbaa !5
  call void @free(ptr %115)
  %116 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %116, ptr %9, align 8, !tbaa !5
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32)

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64)

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32)

declare zeroext i1 @_FortranAioOutputReal64(ptr, double)

declare i32 @_FortranAioEndIoStatement(ptr)

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #0

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #0

attributes #0 = { nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = !{!6, !6, i64 0}
!6 = !{!"descriptor member", !3, i64 0}
*** IR Dump After InferFunctionAttrsPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) #1

define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  %3 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %4 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %5 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %6 = load i32, ptr %1, align 4, !tbaa !1
  %7 = call i1 @_FortranAioOutputInteger32(ptr %4, i32 %6)
  %8 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.2920697320, i64 5)
  %9 = load double, ptr %2, align 8, !tbaa !1
  %10 = call i1 @_FortranAioOutputReal64(ptr %4, double %9)
  %11 = call i32 @_FortranAioEndIoStatement(ptr %4)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %4 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %5 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %6 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %7 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %8 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %9 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, i64 1, align 8
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr null, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 0, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64)]] }, ptr %8, align 8, !tbaa !5
  %10 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %9, align 8, !tbaa !5
  %11 = alloca i32, i64 1, align 4
  %12 = alloca i32, i64 1, align 4
  %13 = alloca i32, i64 1, align 4
  %14 = alloca i32, i64 1, align 4
  %15 = alloca i32, i64 1, align 4
  %16 = alloca double, i64 1, align 8
  %17 = alloca i32, i64 1, align 4
  %18 = load i32, ptr %0, align 4, !tbaa !1
  %19 = sext i32 %18 to i64
  %20 = icmp sgt i64 %19, 0
  %21 = select i1 %20, i64 %19, i64 0
  %22 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %23 = call ptr @malloc(i64 %22)
  %24 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %21, 7, 0, 1
  %25 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %24, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %26 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %27 = mul i64 1, %21
  %28 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %25, ptr %23, 0
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %28, ptr %7, align 8, !tbaa !5
  %29 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %7, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %29, ptr %9, align 8, !tbaa !5
  store i32 0, ptr %15, align 4, !tbaa !1
  store i32 1, ptr %14, align 4, !tbaa !1
  %30 = load i32, ptr %0, align 4, !tbaa !1
  %31 = load i32, ptr %14, align 4, !tbaa !1
  %32 = sdiv i32 %30, %31
  store i32 %32, ptr %11, align 4, !tbaa !1
  %33 = load i32, ptr %15, align 4, !tbaa !1
  %34 = load i32, ptr %11, align 4, !tbaa !1
  %35 = mul i32 %33, %34
  %36 = add i32 %35, 1
  store i32 %36, ptr %12, align 4, !tbaa !1
  %37 = load i32, ptr %15, align 4, !tbaa !1
  %38 = load i32, ptr %14, align 4, !tbaa !1
  %39 = sub i32 %38, 1
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %2
  %42 = load i32, ptr %0, align 4, !tbaa !1
  store i32 %42, ptr %17, align 4, !tbaa !1
  br label %47

43:                                               ; preds = %2
  %44 = load i32, ptr %12, align 4, !tbaa !1
  %45 = load i32, ptr %11, align 4, !tbaa !1
  %46 = add i32 %44, %45
  store i32 %46, ptr %17, align 4, !tbaa !1
  br label %47

47:                                               ; preds = %41, %43
  %48 = load i32, ptr %12, align 4, !tbaa !1
  %49 = sext i32 %48 to i64
  %50 = load i32, ptr %17, align 4, !tbaa !1
  %51 = sext i32 %50 to i64
  %52 = trunc i64 %49 to i32
  %53 = sub i64 %51, %49
  %54 = add i64 %53, 1
  br label %55

55:                                               ; preds = %59, %47
  %56 = phi i32 [ %92, %59 ], [ %52, %47 ]
  %57 = phi i64 [ %93, %59 ], [ %54, %47 ]
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %59, label %94

59:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %60 = load i32, ptr %0, align 4, !tbaa !1
  %61 = sitofp i32 %60 to float
  %62 = fdiv contract float 1.000000e+00, %61
  %63 = fpext float %62 to double
  %64 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %64, ptr %6, align 8, !tbaa !5
  %65 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 0
  %66 = load i64, ptr %65, align 8, !tbaa !5
  %67 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 1
  %68 = load i64, ptr %67, align 8, !tbaa !5
  %69 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 2
  %70 = load i64, ptr %69, align 8, !tbaa !5
  %71 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = load i32, ptr %13, align 4, !tbaa !1
  %74 = sext i32 %73 to i64
  %75 = sub i64 %74, %66
  %76 = getelementptr double, ptr %72, i64 %75
  store double %63, ptr %76, align 8, !tbaa !1
  %77 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %77, ptr %5, align 8, !tbaa !5
  %78 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 0
  %79 = load i64, ptr %78, align 8, !tbaa !5
  %80 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 1
  %81 = load i64, ptr %80, align 8, !tbaa !5
  %82 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 2
  %83 = load i64, ptr %82, align 8, !tbaa !5
  %84 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load i32, ptr %13, align 4, !tbaa !1
  %87 = sext i32 %86 to i64
  %88 = sub i64 %87, %79
  %89 = getelementptr double, ptr %85, i64 %88
  %90 = load double, ptr %89, align 8, !tbaa !1
  store double %90, ptr %16, align 8, !tbaa !1
  %91 = load i32, ptr %13, align 4, !tbaa !1
  %92 = add i32 %91, 1
  %93 = sub i64 %57, 1
  br label %55

94:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %95 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %95, ptr %4, align 8, !tbaa !5
  %96 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 0
  %97 = load i64, ptr %96, align 8, !tbaa !5
  %98 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 1
  %99 = load i64, ptr %98, align 8, !tbaa !5
  %100 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 2
  %101 = load i64, ptr %100, align 8, !tbaa !5
  %102 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  %104 = sub i64 1, %97
  %105 = getelementptr double, ptr %103, i64 %104
  %106 = load double, ptr %105, align 8, !tbaa !1
  %107 = load i32, ptr %0, align 4, !tbaa !1
  %108 = sext i32 %107 to i64
  %109 = sub i64 %108, %97
  %110 = getelementptr double, ptr %103, i64 %109
  %111 = load double, ptr %110, align 8, !tbaa !1
  %112 = fadd contract double %106, %111
  store double %112, ptr %1, align 8, !tbaa !1
  %113 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %113, ptr %3, align 8, !tbaa !5
  %114 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %3, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8, !tbaa !5
  call void @free(ptr %115)
  %116 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %116, ptr %9, align 8, !tbaa !5
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32)

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64)

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32)

declare zeroext i1 @_FortranAioOutputReal64(ptr, double)

declare i32 @_FortranAioEndIoStatement(ptr)

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #2

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = !{!6, !6, i64 0}
!6 = !{!"descriptor member", !3, i64 0}
*** IR Dump After CoroEarlyPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) #1

define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  %3 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %4 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %5 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %6 = load i32, ptr %1, align 4, !tbaa !1
  %7 = call i1 @_FortranAioOutputInteger32(ptr %4, i32 %6)
  %8 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.2920697320, i64 5)
  %9 = load double, ptr %2, align 8, !tbaa !1
  %10 = call i1 @_FortranAioOutputReal64(ptr %4, double %9)
  %11 = call i32 @_FortranAioEndIoStatement(ptr %4)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %4 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %5 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %6 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %7 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %8 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %9 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, i64 1, align 8
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr null, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 0, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64)]] }, ptr %8, align 8, !tbaa !5
  %10 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %9, align 8, !tbaa !5
  %11 = alloca i32, i64 1, align 4
  %12 = alloca i32, i64 1, align 4
  %13 = alloca i32, i64 1, align 4
  %14 = alloca i32, i64 1, align 4
  %15 = alloca i32, i64 1, align 4
  %16 = alloca double, i64 1, align 8
  %17 = alloca i32, i64 1, align 4
  %18 = load i32, ptr %0, align 4, !tbaa !1
  %19 = sext i32 %18 to i64
  %20 = icmp sgt i64 %19, 0
  %21 = select i1 %20, i64 %19, i64 0
  %22 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %23 = call ptr @malloc(i64 %22)
  %24 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %21, 7, 0, 1
  %25 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %24, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %26 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %27 = mul i64 1, %21
  %28 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %25, ptr %23, 0
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %28, ptr %7, align 8, !tbaa !5
  %29 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %7, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %29, ptr %9, align 8, !tbaa !5
  store i32 0, ptr %15, align 4, !tbaa !1
  store i32 1, ptr %14, align 4, !tbaa !1
  %30 = load i32, ptr %0, align 4, !tbaa !1
  %31 = load i32, ptr %14, align 4, !tbaa !1
  %32 = sdiv i32 %30, %31
  store i32 %32, ptr %11, align 4, !tbaa !1
  %33 = load i32, ptr %15, align 4, !tbaa !1
  %34 = load i32, ptr %11, align 4, !tbaa !1
  %35 = mul i32 %33, %34
  %36 = add i32 %35, 1
  store i32 %36, ptr %12, align 4, !tbaa !1
  %37 = load i32, ptr %15, align 4, !tbaa !1
  %38 = load i32, ptr %14, align 4, !tbaa !1
  %39 = sub i32 %38, 1
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %2
  %42 = load i32, ptr %0, align 4, !tbaa !1
  store i32 %42, ptr %17, align 4, !tbaa !1
  br label %47

43:                                               ; preds = %2
  %44 = load i32, ptr %12, align 4, !tbaa !1
  %45 = load i32, ptr %11, align 4, !tbaa !1
  %46 = add i32 %44, %45
  store i32 %46, ptr %17, align 4, !tbaa !1
  br label %47

47:                                               ; preds = %41, %43
  %48 = load i32, ptr %12, align 4, !tbaa !1
  %49 = sext i32 %48 to i64
  %50 = load i32, ptr %17, align 4, !tbaa !1
  %51 = sext i32 %50 to i64
  %52 = trunc i64 %49 to i32
  %53 = sub i64 %51, %49
  %54 = add i64 %53, 1
  br label %55

55:                                               ; preds = %59, %47
  %56 = phi i32 [ %92, %59 ], [ %52, %47 ]
  %57 = phi i64 [ %93, %59 ], [ %54, %47 ]
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %59, label %94

59:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %60 = load i32, ptr %0, align 4, !tbaa !1
  %61 = sitofp i32 %60 to float
  %62 = fdiv contract float 1.000000e+00, %61
  %63 = fpext float %62 to double
  %64 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %64, ptr %6, align 8, !tbaa !5
  %65 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 0
  %66 = load i64, ptr %65, align 8, !tbaa !5
  %67 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 1
  %68 = load i64, ptr %67, align 8, !tbaa !5
  %69 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 2
  %70 = load i64, ptr %69, align 8, !tbaa !5
  %71 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = load i32, ptr %13, align 4, !tbaa !1
  %74 = sext i32 %73 to i64
  %75 = sub i64 %74, %66
  %76 = getelementptr double, ptr %72, i64 %75
  store double %63, ptr %76, align 8, !tbaa !1
  %77 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %77, ptr %5, align 8, !tbaa !5
  %78 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 0
  %79 = load i64, ptr %78, align 8, !tbaa !5
  %80 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 1
  %81 = load i64, ptr %80, align 8, !tbaa !5
  %82 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 2
  %83 = load i64, ptr %82, align 8, !tbaa !5
  %84 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load i32, ptr %13, align 4, !tbaa !1
  %87 = sext i32 %86 to i64
  %88 = sub i64 %87, %79
  %89 = getelementptr double, ptr %85, i64 %88
  %90 = load double, ptr %89, align 8, !tbaa !1
  store double %90, ptr %16, align 8, !tbaa !1
  %91 = load i32, ptr %13, align 4, !tbaa !1
  %92 = add i32 %91, 1
  %93 = sub i64 %57, 1
  br label %55

94:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %95 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %95, ptr %4, align 8, !tbaa !5
  %96 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 0
  %97 = load i64, ptr %96, align 8, !tbaa !5
  %98 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 1
  %99 = load i64, ptr %98, align 8, !tbaa !5
  %100 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 2
  %101 = load i64, ptr %100, align 8, !tbaa !5
  %102 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  %104 = sub i64 1, %97
  %105 = getelementptr double, ptr %103, i64 %104
  %106 = load double, ptr %105, align 8, !tbaa !1
  %107 = load i32, ptr %0, align 4, !tbaa !1
  %108 = sext i32 %107 to i64
  %109 = sub i64 %108, %97
  %110 = getelementptr double, ptr %103, i64 %109
  %111 = load double, ptr %110, align 8, !tbaa !1
  %112 = fadd contract double %106, %111
  store double %112, ptr %1, align 8, !tbaa !1
  %113 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %113, ptr %3, align 8, !tbaa !5
  %114 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %3, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8, !tbaa !5
  call void @free(ptr %115)
  %116 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %116, ptr %9, align 8, !tbaa !5
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32)

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64)

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32)

declare zeroext i1 @_FortranAioOutputReal64(ptr, double)

declare i32 @_FortranAioEndIoStatement(ptr)

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #2

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = !{!6, !6, i64 0}
!6 = !{!"descriptor member", !3, i64 0}
*** IR Dump After LowerExpectIntrinsicPass on _QQmain ***
define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  %3 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %4 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %5 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %6 = load i32, ptr %1, align 4, !tbaa !1
  %7 = call i1 @_FortranAioOutputInteger32(ptr %4, i32 %6)
  %8 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.2920697320, i64 5)
  %9 = load double, ptr %2, align 8, !tbaa !1
  %10 = call i1 @_FortranAioOutputReal64(ptr %4, double %9)
  %11 = call i32 @_FortranAioEndIoStatement(ptr %4)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  %3 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %4 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %5 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %6 = load i32, ptr %1, align 4, !tbaa !1
  %7 = call i1 @_FortranAioOutputInteger32(ptr %4, i32 %6)
  %8 = call i1 @_FortranAioOutputAscii(ptr %4, ptr @_QQcl.2920697320, i64 5)
  %9 = load double, ptr %2, align 8, !tbaa !1
  %10 = call i1 @_FortranAioOutputReal64(ptr %4, double %9)
  %11 = call i32 @_FortranAioEndIoStatement(ptr %4)
  ret void
}
*** IR Dump After SROAPass on _QQmain ***
define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After EarlyCSEPass on _QQmain ***
define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After CallSiteSplittingPass on _QQmain ***
define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After LowerExpectIntrinsicPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %4 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %5 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %6 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %7 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %8 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %9 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, i64 1, align 8
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr null, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 0, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64)]] }, ptr %8, align 8, !tbaa !5
  %10 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %9, align 8, !tbaa !5
  %11 = alloca i32, i64 1, align 4
  %12 = alloca i32, i64 1, align 4
  %13 = alloca i32, i64 1, align 4
  %14 = alloca i32, i64 1, align 4
  %15 = alloca i32, i64 1, align 4
  %16 = alloca double, i64 1, align 8
  %17 = alloca i32, i64 1, align 4
  %18 = load i32, ptr %0, align 4, !tbaa !1
  %19 = sext i32 %18 to i64
  %20 = icmp sgt i64 %19, 0
  %21 = select i1 %20, i64 %19, i64 0
  %22 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %23 = call ptr @malloc(i64 %22)
  %24 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %21, 7, 0, 1
  %25 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %24, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %26 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %27 = mul i64 1, %21
  %28 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %25, ptr %23, 0
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %28, ptr %7, align 8, !tbaa !5
  %29 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %7, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %29, ptr %9, align 8, !tbaa !5
  store i32 0, ptr %15, align 4, !tbaa !1
  store i32 1, ptr %14, align 4, !tbaa !1
  %30 = load i32, ptr %0, align 4, !tbaa !1
  %31 = load i32, ptr %14, align 4, !tbaa !1
  %32 = sdiv i32 %30, %31
  store i32 %32, ptr %11, align 4, !tbaa !1
  %33 = load i32, ptr %15, align 4, !tbaa !1
  %34 = load i32, ptr %11, align 4, !tbaa !1
  %35 = mul i32 %33, %34
  %36 = add i32 %35, 1
  store i32 %36, ptr %12, align 4, !tbaa !1
  %37 = load i32, ptr %15, align 4, !tbaa !1
  %38 = load i32, ptr %14, align 4, !tbaa !1
  %39 = sub i32 %38, 1
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %2
  %42 = load i32, ptr %0, align 4, !tbaa !1
  store i32 %42, ptr %17, align 4, !tbaa !1
  br label %47

43:                                               ; preds = %2
  %44 = load i32, ptr %12, align 4, !tbaa !1
  %45 = load i32, ptr %11, align 4, !tbaa !1
  %46 = add i32 %44, %45
  store i32 %46, ptr %17, align 4, !tbaa !1
  br label %47

47:                                               ; preds = %41, %43
  %48 = load i32, ptr %12, align 4, !tbaa !1
  %49 = sext i32 %48 to i64
  %50 = load i32, ptr %17, align 4, !tbaa !1
  %51 = sext i32 %50 to i64
  %52 = trunc i64 %49 to i32
  %53 = sub i64 %51, %49
  %54 = add i64 %53, 1
  br label %55

55:                                               ; preds = %59, %47
  %56 = phi i32 [ %92, %59 ], [ %52, %47 ]
  %57 = phi i64 [ %93, %59 ], [ %54, %47 ]
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %59, label %94

59:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %60 = load i32, ptr %0, align 4, !tbaa !1
  %61 = sitofp i32 %60 to float
  %62 = fdiv contract float 1.000000e+00, %61
  %63 = fpext float %62 to double
  %64 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %64, ptr %6, align 8, !tbaa !5
  %65 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 0
  %66 = load i64, ptr %65, align 8, !tbaa !5
  %67 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 1
  %68 = load i64, ptr %67, align 8, !tbaa !5
  %69 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 2
  %70 = load i64, ptr %69, align 8, !tbaa !5
  %71 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = load i32, ptr %13, align 4, !tbaa !1
  %74 = sext i32 %73 to i64
  %75 = sub i64 %74, %66
  %76 = getelementptr double, ptr %72, i64 %75
  store double %63, ptr %76, align 8, !tbaa !1
  %77 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %77, ptr %5, align 8, !tbaa !5
  %78 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 0
  %79 = load i64, ptr %78, align 8, !tbaa !5
  %80 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 1
  %81 = load i64, ptr %80, align 8, !tbaa !5
  %82 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 2
  %83 = load i64, ptr %82, align 8, !tbaa !5
  %84 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load i32, ptr %13, align 4, !tbaa !1
  %87 = sext i32 %86 to i64
  %88 = sub i64 %87, %79
  %89 = getelementptr double, ptr %85, i64 %88
  %90 = load double, ptr %89, align 8, !tbaa !1
  store double %90, ptr %16, align 8, !tbaa !1
  %91 = load i32, ptr %13, align 4, !tbaa !1
  %92 = add i32 %91, 1
  %93 = sub i64 %57, 1
  br label %55

94:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %95 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %95, ptr %4, align 8, !tbaa !5
  %96 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 0
  %97 = load i64, ptr %96, align 8, !tbaa !5
  %98 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 1
  %99 = load i64, ptr %98, align 8, !tbaa !5
  %100 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 2
  %101 = load i64, ptr %100, align 8, !tbaa !5
  %102 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  %104 = sub i64 1, %97
  %105 = getelementptr double, ptr %103, i64 %104
  %106 = load double, ptr %105, align 8, !tbaa !1
  %107 = load i32, ptr %0, align 4, !tbaa !1
  %108 = sext i32 %107 to i64
  %109 = sub i64 %108, %97
  %110 = getelementptr double, ptr %103, i64 %109
  %111 = load double, ptr %110, align 8, !tbaa !1
  %112 = fadd contract double %106, %111
  store double %112, ptr %1, align 8, !tbaa !1
  %113 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %113, ptr %3, align 8, !tbaa !5
  %114 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %3, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8, !tbaa !5
  call void @free(ptr %115)
  %116 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %116, ptr %9, align 8, !tbaa !5
  ret void
}
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %4 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %5 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %6 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %7 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %8 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, align 8
  %9 = alloca { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, i64 1, align 8
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr null, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 0, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64)]] }, ptr %8, align 8, !tbaa !5
  %10 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %9, align 8, !tbaa !5
  %11 = alloca i32, i64 1, align 4
  %12 = alloca i32, i64 1, align 4
  %13 = alloca i32, i64 1, align 4
  %14 = alloca i32, i64 1, align 4
  %15 = alloca i32, i64 1, align 4
  %16 = alloca double, i64 1, align 8
  %17 = alloca i32, i64 1, align 4
  %18 = load i32, ptr %0, align 4, !tbaa !1
  %19 = sext i32 %18 to i64
  %20 = icmp sgt i64 %19, 0
  %21 = select i1 %20, i64 %19, i64 0
  %22 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %23 = call ptr @malloc(i64 %22)
  %24 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %21, 7, 0, 1
  %25 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %24, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %26 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %21
  %27 = mul i64 1, %21
  %28 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %25, ptr %23, 0
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %28, ptr %7, align 8, !tbaa !5
  %29 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %7, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %29, ptr %9, align 8, !tbaa !5
  store i32 0, ptr %15, align 4, !tbaa !1
  store i32 1, ptr %14, align 4, !tbaa !1
  %30 = load i32, ptr %0, align 4, !tbaa !1
  %31 = load i32, ptr %14, align 4, !tbaa !1
  %32 = sdiv i32 %30, %31
  store i32 %32, ptr %11, align 4, !tbaa !1
  %33 = load i32, ptr %15, align 4, !tbaa !1
  %34 = load i32, ptr %11, align 4, !tbaa !1
  %35 = mul i32 %33, %34
  %36 = add i32 %35, 1
  store i32 %36, ptr %12, align 4, !tbaa !1
  %37 = load i32, ptr %15, align 4, !tbaa !1
  %38 = load i32, ptr %14, align 4, !tbaa !1
  %39 = sub i32 %38, 1
  %40 = icmp eq i32 %37, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %2
  %42 = load i32, ptr %0, align 4, !tbaa !1
  store i32 %42, ptr %17, align 4, !tbaa !1
  br label %47

43:                                               ; preds = %2
  %44 = load i32, ptr %12, align 4, !tbaa !1
  %45 = load i32, ptr %11, align 4, !tbaa !1
  %46 = add i32 %44, %45
  store i32 %46, ptr %17, align 4, !tbaa !1
  br label %47

47:                                               ; preds = %41, %43
  %48 = load i32, ptr %12, align 4, !tbaa !1
  %49 = sext i32 %48 to i64
  %50 = load i32, ptr %17, align 4, !tbaa !1
  %51 = sext i32 %50 to i64
  %52 = trunc i64 %49 to i32
  %53 = sub i64 %51, %49
  %54 = add i64 %53, 1
  br label %55

55:                                               ; preds = %59, %47
  %56 = phi i32 [ %92, %59 ], [ %52, %47 ]
  %57 = phi i64 [ %93, %59 ], [ %54, %47 ]
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %59, label %94

59:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %60 = load i32, ptr %0, align 4, !tbaa !1
  %61 = sitofp i32 %60 to float
  %62 = fdiv contract float 1.000000e+00, %61
  %63 = fpext float %62 to double
  %64 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %64, ptr %6, align 8, !tbaa !5
  %65 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 0
  %66 = load i64, ptr %65, align 8, !tbaa !5
  %67 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 1
  %68 = load i64, ptr %67, align 8, !tbaa !5
  %69 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 7, i64 0, i32 2
  %70 = load i64, ptr %69, align 8, !tbaa !5
  %71 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %6, i32 0, i32 0
  %72 = load ptr, ptr %71, align 8, !tbaa !5
  %73 = load i32, ptr %13, align 4, !tbaa !1
  %74 = sext i32 %73 to i64
  %75 = sub i64 %74, %66
  %76 = getelementptr double, ptr %72, i64 %75
  store double %63, ptr %76, align 8, !tbaa !1
  %77 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %77, ptr %5, align 8, !tbaa !5
  %78 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 0
  %79 = load i64, ptr %78, align 8, !tbaa !5
  %80 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 1
  %81 = load i64, ptr %80, align 8, !tbaa !5
  %82 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 7, i64 0, i32 2
  %83 = load i64, ptr %82, align 8, !tbaa !5
  %84 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %5, i32 0, i32 0
  %85 = load ptr, ptr %84, align 8, !tbaa !5
  %86 = load i32, ptr %13, align 4, !tbaa !1
  %87 = sext i32 %86 to i64
  %88 = sub i64 %87, %79
  %89 = getelementptr double, ptr %85, i64 %88
  %90 = load double, ptr %89, align 8, !tbaa !1
  store double %90, ptr %16, align 8, !tbaa !1
  %91 = load i32, ptr %13, align 4, !tbaa !1
  %92 = add i32 %91, 1
  %93 = sub i64 %57, 1
  br label %55

94:                                               ; preds = %55
  store i32 %56, ptr %13, align 4, !tbaa !1
  %95 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %95, ptr %4, align 8, !tbaa !5
  %96 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 0
  %97 = load i64, ptr %96, align 8, !tbaa !5
  %98 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 1
  %99 = load i64, ptr %98, align 8, !tbaa !5
  %100 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 7, i64 0, i32 2
  %101 = load i64, ptr %100, align 8, !tbaa !5
  %102 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %4, i32 0, i32 0
  %103 = load ptr, ptr %102, align 8, !tbaa !5
  %104 = sub i64 1, %97
  %105 = getelementptr double, ptr %103, i64 %104
  %106 = load double, ptr %105, align 8, !tbaa !1
  %107 = load i32, ptr %0, align 4, !tbaa !1
  %108 = sext i32 %107 to i64
  %109 = sub i64 %108, %97
  %110 = getelementptr double, ptr %103, i64 %109
  %111 = load double, ptr %110, align 8, !tbaa !1
  %112 = fadd contract double %106, %111
  store double %112, ptr %1, align 8, !tbaa !1
  %113 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %9, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %113, ptr %3, align 8, !tbaa !5
  %114 = getelementptr { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %3, i32 0, i32 0
  %115 = load ptr, ptr %114, align 8, !tbaa !5
  call void @free(ptr %115)
  %116 = load { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] }, ptr %8, align 8, !tbaa !5
  store { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %116, ptr %9, align 8, !tbaa !5
  ret void
}
*** IR Dump After SROAPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %.fca.0.insert180 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr null, 0
  %.fca.1.insert182 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert180, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 1
  %.fca.2.insert184 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert182, i32 20180515, 2
  %.fca.3.insert186 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert184, i8 1, 3
  %.fca.4.insert188 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert186, i8 28, 4
  %.fca.5.insert190 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert188, i8 2, 5
  %.fca.6.insert192 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert190, i8 0, 6
  %.fca.7.0.0.insert194 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert192, i64 1, 7, 0, 0
  %.fca.7.0.1.insert196 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert194, i64 0, 7, 0, 1
  %.fca.7.0.2.insert198 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert196, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %.fca.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 0
  %.fca.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 1
  %.fca.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 2
  %.fca.3.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 3
  %.fca.4.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 4
  %.fca.5.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 5
  %.fca.6.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 6
  %.fca.7.0.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 7, 0, 0
  %.fca.7.0.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 7, 0, 1
  %.fca.7.0.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert198, 7, 0, 2
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %12 = mul i64 1, %6
  %13 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.0.extract240 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 7, 0, 0
  %.fca.7.0.1.extract248 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 7, 0, 1
  %.fca.7.0.2.extract249 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %13, 7, 0, 2
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %.fca.0.extract240, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %.fca.7.0.1.extract248, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 %.fca.7.0.2.extract249, 7, 0, 2
  %.fca.0.extract12 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 0
  %.fca.1.extract14 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 1
  %.fca.2.extract16 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 2
  %.fca.3.extract18 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 3
  %.fca.4.extract20 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 4
  %.fca.5.extract22 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 5
  %.fca.6.extract24 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 6
  %.fca.7.0.0.extract26 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 7, 0, 0
  %.fca.7.0.1.extract28 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 7, 0, 1
  %.fca.7.0.2.extract30 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert269, 7, 0, 2
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sdiv i32 %14, 1
  %16 = mul i32 0, %15
  %17 = add i32 %16, 1
  %18 = sub i32 1, 1
  %19 = icmp eq i32 0, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %2
  %21 = load i32, ptr %0, align 4, !tbaa !1
  br label %24

22:                                               ; preds = %2
  %23 = add i32 %17, %15
  br label %24

24:                                               ; preds = %20, %22
  %.0 = phi i32 [ %21, %20 ], [ %23, %22 ]
  %25 = sext i32 %17 to i64
  %26 = sext i32 %.0 to i64
  %27 = trunc i64 %25 to i32
  %28 = sub i64 %26, %25
  %29 = add i64 %28, 1
  br label %30

30:                                               ; preds = %34, %24
  %31 = phi i32 [ %46, %34 ], [ %27, %24 ]
  %32 = phi i64 [ %47, %34 ], [ %29, %24 ]
  %33 = icmp sgt i64 %32, 0
  br i1 %33, label %34, label %48

34:                                               ; preds = %30
  %35 = load i32, ptr %0, align 4, !tbaa !1
  %36 = sitofp i32 %35 to float
  %37 = fdiv contract float 1.000000e+00, %36
  %38 = fpext float %37 to double
  %.fca.0.insert94 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %.fca.0.extract12, 0
  %.fca.1.insert97 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert94, i64 %.fca.1.extract14, 1
  %.fca.2.insert100 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert97, i32 %.fca.2.extract16, 2
  %.fca.3.insert103 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert100, i8 %.fca.3.extract18, 3
  %.fca.4.insert106 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert103, i8 %.fca.4.extract20, 4
  %.fca.5.insert109 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert106, i8 %.fca.5.extract22, 5
  %.fca.6.insert112 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert109, i8 %.fca.6.extract24, 6
  %.fca.7.0.0.insert115 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert112, i64 %.fca.7.0.0.extract26, 7, 0, 0
  %.fca.7.0.1.insert118 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert115, i64 %.fca.7.0.1.extract28, 7, 0, 1
  %.fca.7.0.2.insert121 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert118, i64 %.fca.7.0.2.extract30, 7, 0, 2
  %.fca.7.0.2.insert121.fca.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 0
  %.fca.7.0.2.insert121.fca.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 1
  %.fca.7.0.2.insert121.fca.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 2
  %.fca.7.0.2.insert121.fca.3.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 3
  %.fca.7.0.2.insert121.fca.4.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 4
  %.fca.7.0.2.insert121.fca.5.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 5
  %.fca.7.0.2.insert121.fca.6.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 6
  %.fca.7.0.2.insert121.fca.7.0.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 7, 0, 0
  %.fca.7.0.2.insert121.fca.7.0.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 7, 0, 1
  %.fca.7.0.2.insert121.fca.7.0.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert121, 7, 0, 2
  %39 = sext i32 %31 to i64
  %40 = sub i64 %39, %.fca.7.0.2.insert121.fca.7.0.0.extract
  %41 = getelementptr double, ptr %.fca.7.0.2.insert121.fca.0.extract, i64 %40
  store double %38, ptr %41, align 8, !tbaa !1
  %.fca.0.insert124 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %.fca.0.extract12, 0
  %.fca.1.insert127 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert124, i64 %.fca.1.extract14, 1
  %.fca.2.insert130 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert127, i32 %.fca.2.extract16, 2
  %.fca.3.insert133 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert130, i8 %.fca.3.extract18, 3
  %.fca.4.insert136 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert133, i8 %.fca.4.extract20, 4
  %.fca.5.insert139 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert136, i8 %.fca.5.extract22, 5
  %.fca.6.insert142 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert139, i8 %.fca.6.extract24, 6
  %.fca.7.0.0.insert145 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert142, i64 %.fca.7.0.0.extract26, 7, 0, 0
  %.fca.7.0.1.insert148 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert145, i64 %.fca.7.0.1.extract28, 7, 0, 1
  %.fca.7.0.2.insert151 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert148, i64 %.fca.7.0.2.extract30, 7, 0, 2
  %.fca.7.0.2.insert151.fca.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 0
  %.fca.7.0.2.insert151.fca.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 1
  %.fca.7.0.2.insert151.fca.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 2
  %.fca.7.0.2.insert151.fca.3.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 3
  %.fca.7.0.2.insert151.fca.4.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 4
  %.fca.7.0.2.insert151.fca.5.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 5
  %.fca.7.0.2.insert151.fca.6.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 6
  %.fca.7.0.2.insert151.fca.7.0.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 7, 0, 0
  %.fca.7.0.2.insert151.fca.7.0.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 7, 0, 1
  %.fca.7.0.2.insert151.fca.7.0.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert151, 7, 0, 2
  %42 = sext i32 %31 to i64
  %43 = sub i64 %42, %.fca.7.0.2.insert151.fca.7.0.0.extract
  %44 = getelementptr double, ptr %.fca.7.0.2.insert151.fca.0.extract, i64 %43
  %45 = load double, ptr %44, align 8, !tbaa !1
  %46 = add i32 %31, 1
  %47 = sub i64 %32, 1
  br label %30

48:                                               ; preds = %30
  %.fca.0.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %.fca.0.extract12, 0
  %.fca.1.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert, i64 %.fca.1.extract14, 1
  %.fca.2.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert, i32 %.fca.2.extract16, 2
  %.fca.3.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert, i8 %.fca.3.extract18, 3
  %.fca.4.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert, i8 %.fca.4.extract20, 4
  %.fca.5.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert, i8 %.fca.5.extract22, 5
  %.fca.6.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert, i8 %.fca.6.extract24, 6
  %.fca.7.0.0.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert, i64 %.fca.7.0.0.extract26, 7, 0, 0
  %.fca.7.0.1.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert, i64 %.fca.7.0.1.extract28, 7, 0, 1
  %.fca.7.0.2.insert = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert, i64 %.fca.7.0.2.extract30, 7, 0, 2
  %.fca.7.0.2.insert.fca.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 0
  %.fca.7.0.2.insert.fca.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 1
  %.fca.7.0.2.insert.fca.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 2
  %.fca.7.0.2.insert.fca.3.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 3
  %.fca.7.0.2.insert.fca.4.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 4
  %.fca.7.0.2.insert.fca.5.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 5
  %.fca.7.0.2.insert.fca.6.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 6
  %.fca.7.0.2.insert.fca.7.0.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 7, 0, 0
  %.fca.7.0.2.insert.fca.7.0.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 7, 0, 1
  %.fca.7.0.2.insert.fca.7.0.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert, 7, 0, 2
  %49 = sub i64 1, %.fca.7.0.2.insert.fca.7.0.0.extract
  %50 = getelementptr double, ptr %.fca.7.0.2.insert.fca.0.extract, i64 %49
  %51 = load double, ptr %50, align 8, !tbaa !1
  %52 = load i32, ptr %0, align 4, !tbaa !1
  %53 = sext i32 %52 to i64
  %54 = sub i64 %53, %.fca.7.0.2.insert.fca.7.0.0.extract
  %55 = getelementptr double, ptr %.fca.7.0.2.insert.fca.0.extract, i64 %54
  %56 = load double, ptr %55, align 8, !tbaa !1
  %57 = fadd contract double %51, %56
  store double %57, ptr %1, align 8, !tbaa !1
  %.fca.0.insert44 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %.fca.0.extract12, 0
  %.fca.1.insert47 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert44, i64 %.fca.1.extract14, 1
  %.fca.2.insert50 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert47, i32 %.fca.2.extract16, 2
  %.fca.3.insert53 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert50, i8 %.fca.3.extract18, 3
  %.fca.4.insert56 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert53, i8 %.fca.4.extract20, 4
  %.fca.5.insert59 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert56, i8 %.fca.5.extract22, 5
  %.fca.6.insert62 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert59, i8 %.fca.6.extract24, 6
  %.fca.7.0.0.insert65 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert62, i64 %.fca.7.0.0.extract26, 7, 0, 0
  %.fca.7.0.1.insert68 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert65, i64 %.fca.7.0.1.extract28, 7, 0, 1
  %.fca.7.0.2.insert71 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert68, i64 %.fca.7.0.2.extract30, 7, 0, 2
  %.fca.7.0.2.insert71.fca.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 0
  %.fca.7.0.2.insert71.fca.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 1
  %.fca.7.0.2.insert71.fca.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 2
  %.fca.7.0.2.insert71.fca.3.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 3
  %.fca.7.0.2.insert71.fca.4.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 4
  %.fca.7.0.2.insert71.fca.5.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 5
  %.fca.7.0.2.insert71.fca.6.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 6
  %.fca.7.0.2.insert71.fca.7.0.0.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 7, 0, 0
  %.fca.7.0.2.insert71.fca.7.0.1.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 7, 0, 1
  %.fca.7.0.2.insert71.fca.7.0.2.extract = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert71, 7, 0, 2
  call void @free(ptr %.fca.7.0.2.insert71.fca.0.extract)
  %.fca.0.insert201 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr null, 0
  %.fca.1.insert204 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert201, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 1
  %.fca.2.insert207 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert204, i32 20180515, 2
  %.fca.3.insert210 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert207, i8 1, 3
  %.fca.4.insert213 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert210, i8 28, 4
  %.fca.5.insert216 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert213, i8 2, 5
  %.fca.6.insert219 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert216, i8 0, 6
  %.fca.7.0.0.insert222 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert219, i64 1, 7, 0, 0
  %.fca.7.0.1.insert225 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert222, i64 0, 7, 0, 1
  %.fca.7.0.2.insert228 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert225, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %.fca.0.extract72 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 0
  %.fca.1.extract74 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 1
  %.fca.2.extract76 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 2
  %.fca.3.extract78 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 3
  %.fca.4.extract80 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 4
  %.fca.5.extract82 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 5
  %.fca.6.extract84 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 6
  %.fca.7.0.0.extract86 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 7, 0, 0
  %.fca.7.0.1.extract88 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 7, 0, 1
  %.fca.7.0.2.extract90 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.2.insert228, 7, 0, 2
  ret void
}
*** IR Dump After EarlyCSEPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 7, 0, 0
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %8, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %6, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %12 = load i32, ptr %0, align 4, !tbaa !1
  br i1 true, label %13, label %14

13:                                               ; preds = %2
  br label %16

14:                                               ; preds = %2
  %15 = add i32 1, %12
  br label %16

16:                                               ; preds = %13, %14
  %.0 = phi i32 [ %12, %13 ], [ %15, %14 ]
  %17 = sext i32 %.0 to i64
  %18 = sub i64 %17, 1
  br label %19

19:                                               ; preds = %23, %16
  %20 = phi i32 [ %31, %23 ], [ 1, %16 ]
  %21 = phi i64 [ %32, %23 ], [ %17, %16 ]
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = load i32, ptr %0, align 4, !tbaa !1
  %25 = sitofp i32 %24 to float
  %26 = fdiv contract float 1.000000e+00, %25
  %27 = fpext float %26 to double
  %28 = sext i32 %20 to i64
  %29 = sub i64 %28, %.fca.7.0.0.extract247
  %30 = getelementptr double, ptr %8, i64 %29
  store double %27, ptr %30, align 8, !tbaa !1
  %31 = add i32 %20, 1
  %32 = sub i64 %21, 1
  br label %19

33:                                               ; preds = %19
  %34 = sub i64 1, %.fca.7.0.0.extract247
  %35 = getelementptr double, ptr %8, i64 %34
  %36 = load double, ptr %35, align 8, !tbaa !1
  %37 = load i32, ptr %0, align 4, !tbaa !1
  %38 = sext i32 %37 to i64
  %39 = sub i64 %38, %.fca.7.0.0.extract247
  %40 = getelementptr double, ptr %8, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !1
  %42 = fadd contract double %36, %41
  store double %42, ptr %1, align 8, !tbaa !1
  call void @free(ptr %8)
  ret void
}
*** IR Dump After CallSiteSplittingPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 7, 0, 0
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %8, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %6, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %12 = load i32, ptr %0, align 4, !tbaa !1
  br i1 true, label %13, label %14

13:                                               ; preds = %2
  br label %16

14:                                               ; preds = %2
  %15 = add i32 1, %12
  br label %16

16:                                               ; preds = %13, %14
  %.0 = phi i32 [ %12, %13 ], [ %15, %14 ]
  %17 = sext i32 %.0 to i64
  %18 = sub i64 %17, 1
  br label %19

19:                                               ; preds = %23, %16
  %20 = phi i32 [ %31, %23 ], [ 1, %16 ]
  %21 = phi i64 [ %32, %23 ], [ %17, %16 ]
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = load i32, ptr %0, align 4, !tbaa !1
  %25 = sitofp i32 %24 to float
  %26 = fdiv contract float 1.000000e+00, %25
  %27 = fpext float %26 to double
  %28 = sext i32 %20 to i64
  %29 = sub i64 %28, %.fca.7.0.0.extract247
  %30 = getelementptr double, ptr %8, i64 %29
  store double %27, ptr %30, align 8, !tbaa !1
  %31 = add i32 %20, 1
  %32 = sub i64 %21, 1
  br label %19

33:                                               ; preds = %19
  %34 = sub i64 1, %.fca.7.0.0.extract247
  %35 = getelementptr double, ptr %8, i64 %34
  %36 = load double, ptr %35, align 8, !tbaa !1
  %37 = load i32, ptr %0, align 4, !tbaa !1
  %38 = sext i32 %37 to i64
  %39 = sub i64 %38, %.fca.7.0.0.extract247
  %40 = getelementptr double, ptr %8, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !1
  %42 = fadd contract double %36, %41
  store double %42, ptr %1, align 8, !tbaa !1
  call void @free(ptr %8)
  ret void
}
*** IR Dump After OpenMPOptPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) #1

define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 7, 0, 0
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %8, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %6, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %12 = load i32, ptr %0, align 4, !tbaa !1
  br i1 true, label %13, label %14

13:                                               ; preds = %2
  br label %16

14:                                               ; preds = %2
  %15 = add i32 1, %12
  br label %16

16:                                               ; preds = %13, %14
  %.0 = phi i32 [ %12, %13 ], [ %15, %14 ]
  %17 = sext i32 %.0 to i64
  %18 = sub i64 %17, 1
  br label %19

19:                                               ; preds = %23, %16
  %20 = phi i32 [ %31, %23 ], [ 1, %16 ]
  %21 = phi i64 [ %32, %23 ], [ %17, %16 ]
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %23, label %33

23:                                               ; preds = %19
  %24 = load i32, ptr %0, align 4, !tbaa !1
  %25 = sitofp i32 %24 to float
  %26 = fdiv contract float 1.000000e+00, %25
  %27 = fpext float %26 to double
  %28 = sext i32 %20 to i64
  %29 = sub i64 %28, %.fca.7.0.0.extract247
  %30 = getelementptr double, ptr %8, i64 %29
  store double %27, ptr %30, align 8, !tbaa !1
  %31 = add i32 %20, 1
  %32 = sub i64 %21, 1
  br label %19

33:                                               ; preds = %19
  %34 = sub i64 1, %.fca.7.0.0.extract247
  %35 = getelementptr double, ptr %8, i64 %34
  %36 = load double, ptr %35, align 8, !tbaa !1
  %37 = load i32, ptr %0, align 4, !tbaa !1
  %38 = sext i32 %37 to i64
  %39 = sub i64 %38, %.fca.7.0.0.extract247
  %40 = getelementptr double, ptr %8, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !1
  %42 = fadd contract double %36, %41
  store double %42, ptr %1, align 8, !tbaa !1
  call void @free(ptr %8)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32)

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64)

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32)

declare zeroext i1 @_FortranAioOutputReal64(ptr, double)

declare i32 @_FortranAioEndIoStatement(ptr)

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #2

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After IPSCCPPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) #1

define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 7, 0, 0
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %8, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %6, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %12 = load i32, ptr %0, align 4, !tbaa !1
  br label %13

13:                                               ; preds = %2
  br label %14

14:                                               ; preds = %13
  %15 = sext i32 %12 to i64
  %16 = sub nsw i64 %15, 1
  br label %17

17:                                               ; preds = %21, %14
  %18 = phi i32 [ %29, %21 ], [ 1, %14 ]
  %19 = phi i64 [ %30, %21 ], [ %15, %14 ]
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %0, align 4, !tbaa !1
  %23 = sitofp i32 %22 to float
  %24 = fdiv contract float 1.000000e+00, %23
  %25 = fpext float %24 to double
  %26 = sext i32 %18 to i64
  %27 = sub i64 %26, %.fca.7.0.0.extract247
  %28 = getelementptr double, ptr %8, i64 %27
  store double %25, ptr %28, align 8, !tbaa !1
  %29 = add i32 %18, 1
  %30 = sub nuw nsw i64 %19, 1
  br label %17

31:                                               ; preds = %17
  %32 = sub i64 1, %.fca.7.0.0.extract247
  %33 = getelementptr double, ptr %8, i64 %32
  %34 = load double, ptr %33, align 8, !tbaa !1
  %35 = load i32, ptr %0, align 4, !tbaa !1
  %36 = sext i32 %35 to i64
  %37 = sub i64 %36, %.fca.7.0.0.extract247
  %38 = getelementptr double, ptr %8, i64 %37
  %39 = load double, ptr %38, align 8, !tbaa !1
  %40 = fadd contract double %34, %39
  store double %40, ptr %1, align 8, !tbaa !1
  call void @free(ptr %8)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32)

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64)

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32)

declare zeroext i1 @_FortranAioOutputReal64(ptr, double)

declare i32 @_FortranAioEndIoStatement(ptr)

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #2

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After CalledValuePropagationPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) #1

define void @_QQmain() {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 7, 0, 0
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %8, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %6, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %12 = load i32, ptr %0, align 4, !tbaa !1
  br label %13

13:                                               ; preds = %2
  br label %14

14:                                               ; preds = %13
  %15 = sext i32 %12 to i64
  %16 = sub nsw i64 %15, 1
  br label %17

17:                                               ; preds = %21, %14
  %18 = phi i32 [ %29, %21 ], [ 1, %14 ]
  %19 = phi i64 [ %30, %21 ], [ %15, %14 ]
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %0, align 4, !tbaa !1
  %23 = sitofp i32 %22 to float
  %24 = fdiv contract float 1.000000e+00, %23
  %25 = fpext float %24 to double
  %26 = sext i32 %18 to i64
  %27 = sub i64 %26, %.fca.7.0.0.extract247
  %28 = getelementptr double, ptr %8, i64 %27
  store double %25, ptr %28, align 8, !tbaa !1
  %29 = add i32 %18, 1
  %30 = sub nuw nsw i64 %19, 1
  br label %17

31:                                               ; preds = %17
  %32 = sub i64 1, %.fca.7.0.0.extract247
  %33 = getelementptr double, ptr %8, i64 %32
  %34 = load double, ptr %33, align 8, !tbaa !1
  %35 = load i32, ptr %0, align 4, !tbaa !1
  %36 = sext i32 %35 to i64
  %37 = sub i64 %36, %.fca.7.0.0.extract247
  %38 = getelementptr double, ptr %8, i64 %37
  %39 = load double, ptr %38, align 8, !tbaa !1
  %40 = fadd contract double %34, %39
  store double %40, ptr %1, align 8, !tbaa !1
  call void @free(ptr %8)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32)

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64)

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32)

declare zeroext i1 @_FortranAioOutputReal64(ptr, double)

declare i32 @_FortranAioEndIoStatement(ptr)

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore(ptr) #2

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 7, 0, 0
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %8, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %6, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %12 = load i32, ptr %0, align 4, !tbaa !1
  br label %13

13:                                               ; preds = %2
  br label %14

14:                                               ; preds = %13
  %15 = sext i32 %12 to i64
  %16 = sub nsw i64 %15, 1
  br label %17

17:                                               ; preds = %21, %14
  %18 = phi i32 [ %29, %21 ], [ 1, %14 ]
  %19 = phi i64 [ %30, %21 ], [ %15, %14 ]
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %0, align 4, !tbaa !1
  %23 = sitofp i32 %22 to float
  %24 = fdiv contract float 1.000000e+00, %23
  %25 = fpext float %24 to double
  %26 = sext i32 %18 to i64
  %27 = sub i64 %26, %.fca.7.0.0.extract247
  %28 = getelementptr double, ptr %8, i64 %27
  store double %25, ptr %28, align 8, !tbaa !1
  %29 = add i32 %18, 1
  %30 = sub nuw nsw i64 %19, 1
  br label %17

31:                                               ; preds = %17
  %32 = sub i64 1, %.fca.7.0.0.extract247
  %33 = getelementptr double, ptr %8, i64 %32
  %34 = load double, ptr %33, align 8, !tbaa !1
  %35 = load i32, ptr %0, align 4, !tbaa !1
  %36 = sext i32 %35 to i64
  %37 = sub i64 %36, %.fca.7.0.0.extract247
  %38 = getelementptr double, ptr %8, i64 %37
  %39 = load double, ptr %38, align 8, !tbaa !1
  %40 = fadd contract double %34, %39
  store double %40, ptr %1, align 8, !tbaa !1
  call void @free(ptr %8)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After PromotePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, i64 1, align 4
  %2 = alloca double, i64 1, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr %1, ptr %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr nonnull %1, ptr nonnull %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr nonnull %1, ptr nonnull %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After PromotePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = sext i32 %3 to i64
  %5 = icmp sgt i64 %4, 0
  %6 = select i1 %5, i64 %4, i64 0
  %7 = mul i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), %6
  %8 = call ptr @malloc(i64 %7)
  %9 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), i32 20180515, i8 1, i8 28, i8 2, i8 0, [1 x [3 x i64]] [[3 x i64] [i64 1, i64 undef, i64 undef]] }, i64 %6, 7, 0, 1
  %10 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %9, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %11 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %10, ptr %8, 0
  %.fca.1.extract241 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 1
  %.fca.2.extract242 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 2
  %.fca.3.extract243 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 3
  %.fca.4.extract244 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 4
  %.fca.5.extract245 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 5
  %.fca.6.extract246 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 6
  %.fca.7.0.0.extract247 = extractvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %11, 7, 0, 0
  %.fca.0.insert251 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } poison, ptr %8, 0
  %.fca.1.insert253 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.0.insert251, i64 %.fca.1.extract241, 1
  %.fca.2.insert255 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.1.insert253, i32 %.fca.2.extract242, 2
  %.fca.3.insert257 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.2.insert255, i8 %.fca.3.extract243, 3
  %.fca.4.insert259 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.3.insert257, i8 %.fca.4.extract244, 4
  %.fca.5.insert261 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.4.insert259, i8 %.fca.5.extract245, 5
  %.fca.6.insert263 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.5.insert261, i8 %.fca.6.extract246, 6
  %.fca.7.0.0.insert265 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.6.insert263, i64 %.fca.7.0.0.extract247, 7, 0, 0
  %.fca.7.0.1.insert267 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.0.insert265, i64 %6, 7, 0, 1
  %.fca.7.0.2.insert269 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [1 x [3 x i64]] } %.fca.7.0.1.insert267, i64 ptrtoint (ptr getelementptr (double, ptr null, i32 1) to i64), 7, 0, 2
  %12 = load i32, ptr %0, align 4, !tbaa !1
  br label %13

13:                                               ; preds = %2
  br label %14

14:                                               ; preds = %13
  %15 = sext i32 %12 to i64
  %16 = sub nsw i64 %15, 1
  br label %17

17:                                               ; preds = %21, %14
  %18 = phi i32 [ %29, %21 ], [ 1, %14 ]
  %19 = phi i64 [ %30, %21 ], [ %15, %14 ]
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %0, align 4, !tbaa !1
  %23 = sitofp i32 %22 to float
  %24 = fdiv contract float 1.000000e+00, %23
  %25 = fpext float %24 to double
  %26 = sext i32 %18 to i64
  %27 = sub i64 %26, %.fca.7.0.0.extract247
  %28 = getelementptr double, ptr %8, i64 %27
  store double %25, ptr %28, align 8, !tbaa !1
  %29 = add i32 %18, 1
  %30 = sub nuw nsw i64 %19, 1
  br label %17

31:                                               ; preds = %17
  %32 = sub i64 1, %.fca.7.0.0.extract247
  %33 = getelementptr double, ptr %8, i64 %32
  %34 = load double, ptr %33, align 8, !tbaa !1
  %35 = load i32, ptr %0, align 4, !tbaa !1
  %36 = sext i32 %35 to i64
  %37 = sub i64 %36, %.fca.7.0.0.extract247
  %38 = getelementptr double, ptr %8, i64 %37
  %39 = load double, ptr %38, align 8, !tbaa !1
  %40 = fadd contract double %34, %39
  store double %40, ptr %1, align 8, !tbaa !1
  call void @free(ptr %8)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  br label %8

8:                                                ; preds = %2
  br label %9

9:                                                ; preds = %8
  %10 = sext i32 %3 to i64
  br label %11

11:                                               ; preds = %15, %9
  %12 = phi i32 [ %23, %15 ], [ 1, %9 ]
  %13 = phi i64 [ %24, %15 ], [ %10, %9 ]
  %14 = icmp sgt i64 %13, 0
  br i1 %14, label %15, label %25

15:                                               ; preds = %11
  %16 = load i32, ptr %0, align 4, !tbaa !1
  %17 = sitofp i32 %16 to float
  %18 = fdiv contract float 1.000000e+00, %17
  %19 = fpext float %18 to double
  %20 = sext i32 %12 to i64
  %21 = add nsw i64 %20, -1
  %22 = getelementptr double, ptr %7, i64 %21
  store double %19, ptr %22, align 8, !tbaa !1
  %23 = add i32 %12, 1
  %24 = add nsw i64 %13, -1
  br label %11

25:                                               ; preds = %11
  %26 = load double, ptr %7, align 8, !tbaa !1
  %27 = load i32, ptr %0, align 4, !tbaa !1
  %28 = sext i32 %27 to i64
  %29 = add nsw i64 %28, -1
  %30 = getelementptr double, ptr %7, i64 %29
  %31 = load double, ptr %30, align 8, !tbaa !1
  %32 = fadd contract double %26, %31
  store double %32, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After RequireAnalysisPass<llvm::GlobalsAA, llvm::Module> on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr nonnull %1, ptr nonnull %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #2

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _QQmain ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr nonnull %1, ptr nonnull %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After InvalidateAnalysisPass<llvm::AAManager> on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After RequireAnalysisPass<llvm::ProfileSummaryAnalysis, llvm::Module> on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr nonnull %1, ptr nonnull %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}

define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #2

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After InlinerPass on (_QFPomp_subroutine) ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After InlinerPass on (_QFPomp_subroutine) ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After PostOrderFunctionAttrsPass on (_QFPomp_subroutine) ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After ArgumentPromotionPass on (_QFPomp_subroutine) ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After OpenMPOptCGSCCPass on (_QFPomp_subroutine) ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After SROAPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %21, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %22, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %23

13:                                               ; preds = %9
  %14 = load i32, ptr %0, align 4, !tbaa !1
  %15 = sitofp i32 %14 to float
  %16 = fdiv contract float 1.000000e+00, %15
  %17 = fpext float %16 to double
  %18 = sext i32 %10 to i64
  %19 = add nsw i64 %18, -1
  %20 = getelementptr double, ptr %7, i64 %19
  store double %17, ptr %20, align 8, !tbaa !1
  %21 = add i32 %10, 1
  %22 = add nsw i64 %11, -1
  br label %9

23:                                               ; preds = %9
  %24 = load double, ptr %7, align 8, !tbaa !1
  %25 = load i32, ptr %0, align 4, !tbaa !1
  %26 = sext i32 %25 to i64
  %27 = add nsw i64 %26, -1
  %28 = getelementptr double, ptr %7, i64 %27
  %29 = load double, ptr %28, align 8, !tbaa !1
  %30 = fadd contract double %24, %29
  store double %30, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After EarlyCSEPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After SpeculativeExecutionPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After JumpThreadingPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After CorrelatedValuePropagationPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After AggressiveInstCombinePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After ConstraintEliminationPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After LibCallsShrinkWrapPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  call void @free(ptr %7)
  ret void
}
*** IR Dump After TailCallElimPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After ReassociatePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopInstSimplifyPass on <unnamed loop> ***

; Preheader:
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

; Loop:
9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

; Exit blocks
22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
*** IR Dump After LoopSimplifyCFGPass on <unnamed loop> ***

; Preheader:
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

; Loop:
9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

; Exit blocks
22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
*** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  br label %9

; Loop:
9:                                                ; preds = %13, %2
  %10 = phi i32 [ %20, %13 ], [ 1, %2 ]
  %11 = phi i64 [ %21, %13 ], [ %8, %2 ]
  %12 = icmp sgt i64 %11, 0
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = sitofp i32 %3 to float
  %15 = fdiv contract float 1.000000e+00, %14
  %16 = fpext float %15 to double
  %17 = sext i32 %10 to i64
  %18 = add nsw i64 %17, -1
  %19 = getelementptr double, ptr %7, i64 %18
  store double %16, ptr %19, align 8, !tbaa !1
  %20 = add i32 %10, 1
  %21 = add nsw i64 %11, -1
  br label %9

; Exit blocks
22:                                               ; preds = %9
  %23 = load double, ptr %7, align 8, !tbaa !1
  %24 = add nsw i64 %8, -1
  %25 = getelementptr double, ptr %7, i64 %24
  %26 = load double, ptr %25, align 8, !tbaa !1
  %27 = fadd contract double %23, %26
  store double %27, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
*** IR Dump After LoopRotatePass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  br label %10

; Loop:
10:                                               ; preds = %.lr.ph, %10
  %11 = phi i64 [ %8, %.lr.ph ], [ %20, %10 ]
  %12 = phi i32 [ 1, %.lr.ph ], [ %19, %10 ]
  %13 = sitofp i32 %3 to float
  %14 = fdiv contract float 1.000000e+00, %13
  %15 = fpext float %14 to double
  %16 = sext i32 %12 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %15, ptr %18, align 8, !tbaa !1
  %19 = add i32 %12, 1
  %20 = add nsw i64 %11, -1
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %10, label %._crit_edge

; Exit blocks
._crit_edge:                                      ; preds = %10
  br label %22
*** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

; Loop:
13:                                               ; preds = %.lr.ph, %13
  %14 = phi i64 [ %8, %.lr.ph ], [ %20, %13 ]
  %15 = phi i32 [ 1, %.lr.ph ], [ %19, %13 ]
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %19 = add i32 %15, 1
  %20 = add nsw i64 %14, -1
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %13, label %._crit_edge

; Exit blocks
._crit_edge:                                      ; preds = %13
  br label %22
*** IR Dump After SimpleLoopUnswitchPass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

; Loop:
13:                                               ; preds = %.lr.ph, %13
  %14 = phi i64 [ %8, %.lr.ph ], [ %20, %13 ]
  %15 = phi i32 [ 1, %.lr.ph ], [ %19, %13 ]
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %19 = add i32 %15, 1
  %20 = add nsw i64 %14, -1
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %13, label %._crit_edge

; Exit blocks
._crit_edge:                                      ; preds = %13
  br label %22
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i64 %8, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %14 = phi i64 [ %8, %.lr.ph ], [ %20, %13 ]
  %15 = phi i32 [ 1, %.lr.ph ], [ %19, %13 ]
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %19 = add i32 %15, 1
  %20 = add nsw i64 %14, -1
  %21 = icmp sgt i64 %20, 0
  br i1 %21, label %13, label %._crit_edge

._crit_edge:                                      ; preds = %13, %2
  %22 = load double, ptr %7, align 8, !tbaa !1
  %23 = add nsw i64 %8, -1
  %24 = getelementptr double, ptr %7, i64 %23
  %25 = load double, ptr %24, align 8, !tbaa !1
  %26 = fadd contract double %22, %25
  store double %26, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %14 = phi i64 [ %8, %.lr.ph ], [ %20, %13 ]
  %15 = phi i32 [ 1, %.lr.ph ], [ %19, %13 ]
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %19 = add i32 %15, 1
  %20 = add nsw i64 %14, -1
  %21 = icmp sgt i64 %14, 1
  br i1 %21, label %13, label %._crit_edge

._crit_edge:                                      ; preds = %13, %2
  %22 = load double, ptr %7, align 8, !tbaa !1
  %23 = add nsw i64 %8, -1
  %24 = getelementptr double, ptr %7, i64 %23
  %25 = load double, ptr %24, align 8, !tbaa !1
  %26 = fadd contract double %22, %25
  store double %26, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %14 = phi i64 [ %8, %.lr.ph ], [ %20, %13 ]
  %15 = phi i32 [ 1, %.lr.ph ], [ %19, %13 ]
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %19 = add i32 %15, 1
  %20 = add nsw i64 %14, -1
  %21 = icmp sgt i64 %14, 1
  br i1 %21, label %13, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %13
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %22 = load double, ptr %7, align 8, !tbaa !1
  %23 = add nsw i64 %8, -1
  %24 = getelementptr double, ptr %7, i64 %23
  %25 = load double, ptr %24, align 8, !tbaa !1
  %26 = fadd contract double %22, %25
  store double %26, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %14 = phi i64 [ %8, %.lr.ph ], [ %20, %13 ]
  %15 = phi i32 [ 1, %.lr.ph ], [ %19, %13 ]
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %19 = add i32 %15, 1
  %20 = add nsw i64 %14, -1
  %21 = icmp sgt i64 %14, 1
  br i1 %21, label %13, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %13
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %22 = load double, ptr %7, align 8, !tbaa !1
  %23 = add nsw i64 %8, -1
  %24 = getelementptr double, ptr %7, i64 %23
  %25 = load double, ptr %24, align 8, !tbaa !1
  %26 = fadd contract double %22, %25
  store double %26, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopIdiomRecognizePass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

; Loop:
13:                                               ; preds = %.lr.ph, %13
  %14 = phi i64 [ %8, %.lr.ph ], [ %20, %13 ]
  %15 = phi i32 [ 1, %.lr.ph ], [ %19, %13 ]
  %16 = sext i32 %15 to i64
  %17 = add nsw i64 %16, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %19 = add i32 %15, 1
  %20 = add nsw i64 %14, -1
  %21 = icmp sgt i64 %14, 1
  br i1 %21, label %13, label %._crit_edge.loopexit

; Exit blocks
._crit_edge.loopexit:                             ; preds = %13
  br label %._crit_edge
*** IR Dump After IndVarSimplifyPass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

; Loop:
14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

; Exit blocks
._crit_edge.loopexit:                             ; preds = %14
  br label %._crit_edge
*** IR Dump After LoopDeletionPass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

; Loop:
14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

; Exit blocks
._crit_edge.loopexit:                             ; preds = %14
  br label %._crit_edge
*** IR Dump After LoopFullUnrollPass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

; Loop:
14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

; Exit blocks
._crit_edge.loopexit:                             ; preds = %14
  br label %._crit_edge
*** IR Dump After SROAPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %17 = load double, ptr %7, align 8, !tbaa !1
  %18 = add nsw i64 %8, -1
  %19 = getelementptr double, ptr %7, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !1
  %21 = fadd contract double %17, %20
  store double %21, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After VectorCombinePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %17 = load double, ptr %7, align 8, !tbaa !1
  %18 = add nsw i64 %8, -1
  %19 = getelementptr double, ptr %7, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !1
  %21 = fadd contract double %17, %20
  store double %21, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After MergedLoadStoreMotionPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %17 = load double, ptr %7, align 8, !tbaa !1
  %18 = add nsw i64 %8, -1
  %19 = getelementptr double, ptr %7, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !1
  %21 = fadd contract double %17, %20
  store double %21, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After GVNPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %17 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %18 = add nsw i64 %8, -1
  %19 = getelementptr double, ptr %7, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !1
  %21 = fadd contract double %17, %20
  store double %21, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After SCCPPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %17 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %18 = add nsw i64 %8, -1
  %19 = getelementptr double, ptr %7, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !1
  %21 = fadd contract double %17, %20
  store double %21, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After BDCEPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %13 = add nsw i64 %8, 1
  br label %14

14:                                               ; preds = %.lr.ph, %14
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %14 ]
  %15 = add nsw i64 %indvars.iv, -1
  %16 = getelementptr double, ptr %7, i64 %15
  store double %12, ptr %16, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, %13
  br i1 %exitcond, label %14, label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %14
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %17 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %18 = add nsw i64 %8, -1
  %19 = getelementptr double, ptr %7, i64 %18
  %20 = load double, ptr %19, align 8, !tbaa !1
  %21 = fadd contract double %17, %20
  store double %21, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After JumpThreadingPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After CorrelatedValuePropagationPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After ADCEPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After MemCpyOptPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After DSEPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After MoveAutoInitPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

; Loop:
13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

; Exit blocks
._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge
*** IR Dump After CoroElidePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
define void @_QFPomp_subroutine(ptr %0, ptr %1) local_unnamed_addr {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After PostOrderFunctionAttrsPass on (_QFPomp_subroutine) ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After RequireAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis, llvm::Function> on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After CoroSplitPass on (_QFPomp_subroutine) ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InlinerPass on (_QQmain) ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  call void @_QFPomp_subroutine(ptr nonnull %1, ptr nonnull %2)
  %3 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %4 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %5 = load i32, ptr %1, align 4, !tbaa !1
  %6 = call i1 @_FortranAioOutputInteger32(ptr %3, i32 %5)
  %7 = call i1 @_FortranAioOutputAscii(ptr %3, ptr nonnull @_QQcl.2920697320, i64 5)
  %8 = load double, ptr %2, align 8, !tbaa !1
  %9 = call i1 @_FortranAioOutputReal64(ptr %3, double %8)
  %10 = call i32 @_FortranAioEndIoStatement(ptr %3)
  ret void
}
*** IR Dump After InlinerPass on (_QQmain) ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  %3 = load i32, ptr %1, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph.i, label %_QFPomp_subroutine.exit

.lr.ph.i:                                         ; preds = %0
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %13, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %13 ]
  %14 = add nsw i64 %indvars.iv.i, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, %8
  br i1 %exitcond.not.i, label %._crit_edge.loopexit.i, label %13

._crit_edge.loopexit.i:                           ; preds = %13
  %.pre.i = load double, ptr %7, align 8, !tbaa !1
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %0, %._crit_edge.loopexit.i
  %16 = phi double [ %.pre.i, %._crit_edge.loopexit.i ], [ undef, %0 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %2, align 8, !tbaa !1
  call void @free(ptr %7)
  %21 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %22 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %23 = load i32, ptr %1, align 4, !tbaa !1
  %24 = call i1 @_FortranAioOutputInteger32(ptr %21, i32 %23)
  %25 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.2920697320, i64 5)
  %26 = load double, ptr %2, align 8, !tbaa !1
  %27 = call i1 @_FortranAioOutputReal64(ptr %21, double %26)
  %28 = call i32 @_FortranAioEndIoStatement(ptr %21)
  ret void
}
*** IR Dump After PostOrderFunctionAttrsPass on (_QQmain) ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  %3 = load i32, ptr %1, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph.i, label %_QFPomp_subroutine.exit

.lr.ph.i:                                         ; preds = %0
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %13, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %13 ]
  %14 = add nsw i64 %indvars.iv.i, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, %8
  br i1 %exitcond.not.i, label %._crit_edge.loopexit.i, label %13

._crit_edge.loopexit.i:                           ; preds = %13
  %.pre.i = load double, ptr %7, align 8, !tbaa !1
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %0, %._crit_edge.loopexit.i
  %16 = phi double [ %.pre.i, %._crit_edge.loopexit.i ], [ undef, %0 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %2, align 8, !tbaa !1
  call void @free(ptr %7)
  %21 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %22 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %23 = load i32, ptr %1, align 4, !tbaa !1
  %24 = call i1 @_FortranAioOutputInteger32(ptr %21, i32 %23)
  %25 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.2920697320, i64 5)
  %26 = load double, ptr %2, align 8, !tbaa !1
  %27 = call i1 @_FortranAioOutputReal64(ptr %21, double %26)
  %28 = call i32 @_FortranAioEndIoStatement(ptr %21)
  ret void
}
*** IR Dump After ArgumentPromotionPass on (_QQmain) ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  %3 = load i32, ptr %1, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph.i, label %_QFPomp_subroutine.exit

.lr.ph.i:                                         ; preds = %0
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %13, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %13 ]
  %14 = add nsw i64 %indvars.iv.i, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, %8
  br i1 %exitcond.not.i, label %._crit_edge.loopexit.i, label %13

._crit_edge.loopexit.i:                           ; preds = %13
  %.pre.i = load double, ptr %7, align 8, !tbaa !1
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %0, %._crit_edge.loopexit.i
  %16 = phi double [ %.pre.i, %._crit_edge.loopexit.i ], [ undef, %0 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %2, align 8, !tbaa !1
  call void @free(ptr %7)
  %21 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %22 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %23 = load i32, ptr %1, align 4, !tbaa !1
  %24 = call i1 @_FortranAioOutputInteger32(ptr %21, i32 %23)
  %25 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.2920697320, i64 5)
  %26 = load double, ptr %2, align 8, !tbaa !1
  %27 = call i1 @_FortranAioOutputReal64(ptr %21, double %26)
  %28 = call i32 @_FortranAioEndIoStatement(ptr %21)
  ret void
}
*** IR Dump After OpenMPOptCGSCCPass on (_QQmain) ***
define void @_QQmain() local_unnamed_addr {
  %1 = alloca i32, align 4
  %2 = alloca double, align 8
  store i32 1048576, ptr %1, align 4, !tbaa !1
  %3 = load i32, ptr %1, align 4, !tbaa !1
  %4 = call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph.i, label %_QFPomp_subroutine.exit

.lr.ph.i:                                         ; preds = %0
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %13, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %13 ]
  %14 = add nsw i64 %indvars.iv.i, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, %8
  br i1 %exitcond.not.i, label %._crit_edge.loopexit.i, label %13

._crit_edge.loopexit.i:                           ; preds = %13
  %.pre.i = load double, ptr %7, align 8, !tbaa !1
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %0, %._crit_edge.loopexit.i
  %16 = phi double [ %.pre.i, %._crit_edge.loopexit.i ], [ undef, %0 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %2, align 8, !tbaa !1
  call void @free(ptr %7)
  %21 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %22 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %23 = load i32, ptr %1, align 4, !tbaa !1
  %24 = call i1 @_FortranAioOutputInteger32(ptr %21, i32 %23)
  %25 = call i1 @_FortranAioOutputAscii(ptr %21, ptr nonnull @_QQcl.2920697320, i64 5)
  %26 = load double, ptr %2, align 8, !tbaa !1
  %27 = call i1 @_FortranAioOutputReal64(ptr %21, double %26)
  %28 = call i32 @_FortranAioEndIoStatement(ptr %21)
  ret void
}
*** IR Dump After SROAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
  %1 = call i32 @llvm.smax.i32(i32 1048576, i32 0)
  %2 = zext i32 %1 to i64
  %3 = shl nuw nsw i64 %2, 3
  %4 = call ptr @malloc(i64 %3)
  %5 = sext i32 1048576 to i64
  %6 = icmp sgt i32 1048576, 0
  br i1 %6, label %.lr.ph.i, label %_QFPomp_subroutine.exit

.lr.ph.i:                                         ; preds = %0
  %7 = sitofp i32 1048576 to float
  %8 = fdiv contract float 1.000000e+00, %7
  %9 = fpext float %8 to double
  br label %10

10:                                               ; preds = %10, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %10 ]
  %11 = add nsw i64 %indvars.iv.i, -1
  %12 = getelementptr double, ptr %4, i64 %11
  store double %9, ptr %12, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, %5
  br i1 %exitcond.not.i, label %._crit_edge.loopexit.i, label %10

._crit_edge.loopexit.i:                           ; preds = %10
  %.pre.i = load double, ptr %4, align 8, !tbaa !1
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %0, %._crit_edge.loopexit.i
  %13 = phi double [ %.pre.i, %._crit_edge.loopexit.i ], [ undef, %0 ]
  %14 = add nsw i64 %5, -1
  %15 = getelementptr double, ptr %4, i64 %14
  %16 = load double, ptr %15, align 8, !tbaa !1
  %17 = fadd contract double %13, %16
  call void @free(ptr %4)
  %18 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %19 = call i1 @_FortranAioOutputAscii(ptr %18, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %20 = call i1 @_FortranAioOutputInteger32(ptr %18, i32 1048576)
  %21 = call i1 @_FortranAioOutputAscii(ptr %18, ptr nonnull @_QQcl.2920697320, i64 5)
  %22 = call i1 @_FortranAioOutputReal64(ptr %18, double %17)
  %23 = call i32 @_FortranAioEndIoStatement(ptr %18)
  ret void
}
*** IR Dump After EarlyCSEPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
  %1 = call ptr @malloc(i64 8388608)
  br i1 true, label %.lr.ph.i, label %_QFPomp_subroutine.exit

.lr.ph.i:                                         ; preds = %0
  br label %2

2:                                                ; preds = %2, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %2 ]
  %3 = add nsw i64 %indvars.iv.i, -1
  %4 = getelementptr double, ptr %1, i64 %3
  store double 0x3EB0000000000000, ptr %4, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %._crit_edge.loopexit.i, label %2

._crit_edge.loopexit.i:                           ; preds = %2
  %.pre.i = load double, ptr %1, align 8, !tbaa !1
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %0, %._crit_edge.loopexit.i
  %5 = phi double [ %.pre.i, %._crit_edge.loopexit.i ], [ undef, %0 ]
  %6 = getelementptr double, ptr %1, i64 1048575
  %7 = load double, ptr %6, align 8, !tbaa !1
  %8 = fadd contract double %5, %7
  call void @free(ptr %1)
  %9 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %10 = call i1 @_FortranAioOutputAscii(ptr %9, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %11 = call i1 @_FortranAioOutputInteger32(ptr %9, i32 1048576)
  %12 = call i1 @_FortranAioOutputAscii(ptr %9, ptr nonnull @_QQcl.2920697320, i64 5)
  %13 = call i1 @_FortranAioOutputReal64(ptr %9, double %8)
  %14 = call i32 @_FortranAioEndIoStatement(ptr %9)
  ret void
}
*** IR Dump After SpeculativeExecutionPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
  %1 = call ptr @malloc(i64 8388608)
  br i1 true, label %.lr.ph.i, label %_QFPomp_subroutine.exit

.lr.ph.i:                                         ; preds = %0
  br label %2

2:                                                ; preds = %2, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %2 ]
  %3 = add nsw i64 %indvars.iv.i, -1
  %4 = getelementptr double, ptr %1, i64 %3
  store double 0x3EB0000000000000, ptr %4, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %._crit_edge.loopexit.i, label %2

._crit_edge.loopexit.i:                           ; preds = %2
  %.pre.i = load double, ptr %1, align 8, !tbaa !1
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %0, %._crit_edge.loopexit.i
  %5 = phi double [ %.pre.i, %._crit_edge.loopexit.i ], [ undef, %0 ]
  %6 = getelementptr double, ptr %1, i64 1048575
  %7 = load double, ptr %6, align 8, !tbaa !1
  %8 = fadd contract double %5, %7
  call void @free(ptr %1)
  %9 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %10 = call i1 @_FortranAioOutputAscii(ptr %9, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %11 = call i1 @_FortranAioOutputInteger32(ptr %9, i32 1048576)
  %12 = call i1 @_FortranAioOutputAscii(ptr %9, ptr nonnull @_QQcl.2920697320, i64 5)
  %13 = call i1 @_FortranAioOutputReal64(ptr %9, double %8)
  %14 = call i32 @_FortranAioEndIoStatement(ptr %9)
  ret void
}
*** IR Dump After JumpThreadingPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = call ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  call void @free(ptr %0)
  %7 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After CorrelatedValuePropagationPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = call ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  call void @free(ptr nonnull %0)
  %7 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = call ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  call void @free(ptr nonnull %0)
  %7 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  call void @free(ptr nonnull %0)
  %7 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After AggressiveInstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  call void @free(ptr nonnull %0)
  %7 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After ConstraintEliminationPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  call void @free(ptr nonnull %0)
  %7 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LibCallsShrinkWrapPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  call void @free(ptr nonnull %0)
  %7 = call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After TailCallElimPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After ReassociatePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopInstSimplifyPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LoopSimplifyCFGPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LoopRotatePass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After SimpleLoopUnswitchPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopIdiomRecognizePass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After IndVarSimplifyPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LoopDeletionPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LoopFullUnrollPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After SROAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After VectorCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After MergedLoadStoreMotionPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After GVNPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After SCCPPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After BDCEPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After JumpThreadingPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After CorrelatedValuePropagationPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After ADCEPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After MemCpyOptPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After DSEPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After MoveAutoInitPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LICMPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After CoroElidePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After PostOrderFunctionAttrsPass on (_QQmain) ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After RequireAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis, llvm::Function> on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After CoroSplitPass on (_QQmain) ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InvalidateAnalysisPass<llvm::ShouldNotRunFunctionPassesAnalysis> on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After DeadArgumentEliminationPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After CoroCleanupPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After GlobalOptPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After EliminateAvailableExternallyPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After ReversePostOrderFunctionAttrsPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After RecomputeGlobalsAAPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
*** IR Dump After Float2IntPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LowerConstantIntrinsicsPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After ControlHeightReductionPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopRotatePass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LoopDeletionPass on <unnamed loop> ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

; Loop:
1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
*** IR Dump After LoopDistributePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InjectTLIMappings on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %1

1:                                                ; preds = %1, %.lr.ph.i
  %indvars.iv.i = phi i64 [ 1, %.lr.ph.i ], [ %indvars.iv.next.i, %1 ]
  %2 = add nsw i64 %indvars.iv.i, -1
  %3 = getelementptr double, ptr %0, i64 %2
  store double 0x3EB0000000000000, ptr %3, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %1

_QFPomp_subroutine.exit:                          ; preds = %1
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopVectorizePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br i1 false, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph.i
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 1, %index
  %1 = add i64 %offset.idx, 0
  %2 = add i64 %offset.idx, 2
  %3 = add nsw i64 %1, -1
  %4 = add nsw i64 %2, -1
  %5 = getelementptr double, ptr %0, i64 %3
  %6 = getelementptr double, ptr %0, i64 %4
  %7 = getelementptr double, ptr %5, i32 0
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %5, i32 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %9 = icmp eq i64 %index.next, 1048576
  br i1 %9, label %middle.block, label %vector.body, !llvm.loop !5

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 1048576, 1048576
  br i1 %cmp.n, label %_QFPomp_subroutine.exit, label %scalar.ph

scalar.ph:                                        ; preds = %.lr.ph.i, %middle.block
  %bc.resume.val = phi i64 [ 1048577, %middle.block ], [ 1, %.lr.ph.i ]
  br label %10

10:                                               ; preds = %10, %scalar.ph
  %indvars.iv.i = phi i64 [ %bc.resume.val, %scalar.ph ], [ %indvars.iv.next.i, %10 ]
  %11 = add nsw i64 %indvars.iv.i, -1
  %12 = getelementptr double, ptr %0, i64 %11
  store double 0x3EB0000000000000, ptr %12, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit, label %10, !llvm.loop !8

_QFPomp_subroutine.exit:                          ; preds = %middle.block, %10
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %13 = getelementptr double, ptr %0, i64 1048575
  %14 = load double, ptr %13, align 8, !tbaa !1
  %15 = fadd contract double %.pre.i, %14
  tail call void @free(ptr nonnull %0)
  %16 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %17 = tail call i1 @_FortranAioOutputAscii(ptr %16, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %18 = tail call i1 @_FortranAioOutputInteger32(ptr %16, i32 1048576)
  %19 = tail call i1 @_FortranAioOutputAscii(ptr %16, ptr nonnull @_QQcl.2920697320, i64 5)
  %20 = tail call i1 @_FortranAioOutputReal64(ptr %16, double %15)
  %21 = tail call i32 @_FortranAioEndIoStatement(ptr %16)
  ret void
}
*** IR Dump After LoopLoadEliminationPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br i1 false, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph.i
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 1, %index
  %1 = add i64 %offset.idx, 0
  %2 = add i64 %offset.idx, 2
  %3 = add nsw i64 %1, -1
  %4 = add nsw i64 %2, -1
  %5 = getelementptr double, ptr %0, i64 %3
  %6 = getelementptr double, ptr %0, i64 %4
  %7 = getelementptr double, ptr %5, i32 0
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %5, i32 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %9 = icmp eq i64 %index.next, 1048576
  br i1 %9, label %middle.block, label %vector.body, !llvm.loop !5

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 1048576, 1048576
  br i1 %cmp.n, label %_QFPomp_subroutine.exit, label %scalar.ph

scalar.ph:                                        ; preds = %.lr.ph.i, %middle.block
  %bc.resume.val = phi i64 [ 1048577, %middle.block ], [ 1, %.lr.ph.i ]
  br label %10

10:                                               ; preds = %10, %scalar.ph
  %indvars.iv.i = phi i64 [ %bc.resume.val, %scalar.ph ], [ %indvars.iv.next.i, %10 ]
  %11 = add nsw i64 %indvars.iv.i, -1
  %12 = getelementptr double, ptr %0, i64 %11
  store double 0x3EB0000000000000, ptr %12, align 8, !tbaa !1
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.i, 1048576
  br i1 %exitcond.not.i, label %_QFPomp_subroutine.exit.loopexit, label %10, !llvm.loop !8

_QFPomp_subroutine.exit.loopexit:                 ; preds = %10
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %_QFPomp_subroutine.exit.loopexit, %middle.block
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %13 = getelementptr double, ptr %0, i64 1048575
  %14 = load double, ptr %13, align 8, !tbaa !1
  %15 = fadd contract double %.pre.i, %14
  tail call void @free(ptr nonnull %0)
  %16 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %17 = tail call i1 @_FortranAioOutputAscii(ptr %16, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %18 = tail call i1 @_FortranAioOutputInteger32(ptr %16, i32 1048576)
  %19 = tail call i1 @_FortranAioOutputAscii(ptr %16, ptr nonnull @_QQcl.2920697320, i64 5)
  %20 = tail call i1 @_FortranAioOutputReal64(ptr %16, double %15)
  %21 = tail call i32 @_FortranAioEndIoStatement(ptr %16)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br i1 false, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph.i
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %3 = icmp eq i64 %index.next, 1048576
  br i1 %3, label %middle.block, label %vector.body, !llvm.loop !5

middle.block:                                     ; preds = %vector.body
  br i1 true, label %_QFPomp_subroutine.exit, label %scalar.ph

scalar.ph:                                        ; preds = %.lr.ph.i, %middle.block
  br label %4

4:                                                ; preds = %4, %scalar.ph
  br i1 poison, label %_QFPomp_subroutine.exit.loopexit, label %4, !llvm.loop !8

_QFPomp_subroutine.exit.loopexit:                 ; preds = %4
  br label %_QFPomp_subroutine.exit

_QFPomp_subroutine.exit:                          ; preds = %_QFPomp_subroutine.exit.loopexit, %middle.block
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %5 = getelementptr double, ptr %0, i64 1048575
  %6 = load double, ptr %5, align 8, !tbaa !1
  %7 = fadd contract double %.pre.i, %6
  tail call void @free(ptr nonnull %0)
  %8 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %9 = tail call i1 @_FortranAioOutputAscii(ptr %8, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %10 = tail call i1 @_FortranAioOutputInteger32(ptr %8, i32 1048576)
  %11 = tail call i1 @_FortranAioOutputAscii(ptr %8, ptr nonnull @_QQcl.2920697320, i64 5)
  %12 = tail call i1 @_FortranAioOutputReal64(ptr %8, double %7)
  %13 = tail call i32 @_FortranAioEndIoStatement(ptr %8)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %3 = icmp eq i64 %index.next, 1048576
  br i1 %3, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After VectorCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %3 = icmp eq i64 %index.next, 1048576
  br i1 %3, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %3 = icmp eq i64 %index.next, 1048576
  br i1 %3, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %4 = getelementptr double, ptr %0, i64 1048575
  %5 = load double, ptr %4, align 8, !tbaa !1
  %6 = fadd contract double %.pre.i, %5
  tail call void @free(ptr nonnull %0)
  %7 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %8 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %9 = tail call i1 @_FortranAioOutputInteger32(ptr %7, i32 1048576)
  %10 = tail call i1 @_FortranAioOutputAscii(ptr %7, ptr nonnull @_QQcl.2920697320, i64 5)
  %11 = tail call i1 @_FortranAioOutputReal64(ptr %7, double %6)
  %12 = tail call i32 @_FortranAioEndIoStatement(ptr %7)
  ret void
}
*** IR Dump After LoopUnrollPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = add nuw nsw i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = add nuw nsw i64 %index.next, 4
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = add nuw nsw i64 %index.next.1, 4
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index.next.2, 4
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After WarnMissedTransformationsPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = add nuw nsw i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = add nuw nsw i64 %index.next, 4
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = add nuw nsw i64 %index.next.1, 4
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index.next.2, 4
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After SROAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = add nuw nsw i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = add nuw nsw i64 %index.next, 4
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = add nuw nsw i64 %index.next.1, 4
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index.next.2, 4
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After InstCombinePass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After LCSSAPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After LICMPass on vector.body ***

; Preheader:
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

; Loop:
vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

; Exit blocks
_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
*** IR Dump After AlignmentFromAssumptionsPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After LoopSinkPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After InstSimplifyPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After DivRemPairsPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After TailCallElimPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After Float2IntPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LowerConstantIntrinsicsPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After ControlHeightReductionPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopRotatePass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

; Loop:
13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

; Exit blocks
._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge
*** IR Dump After LoopDeletionPass on <unnamed loop> ***

; Preheader:
.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

; Loop:
13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

; Exit blocks
._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge
*** IR Dump After LoopDistributePass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InjectTLIMappings on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  br label %13

13:                                               ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 1, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %14 = add nsw i64 %indvars.iv, -1
  %15 = getelementptr double, ptr %7, i64 %14
  store double %12, ptr %15, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %13

._crit_edge.loopexit:                             ; preds = %13
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %16 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %17 = add nsw i64 %8, -1
  %18 = getelementptr double, ptr %7, i64 %17
  %19 = load double, ptr %18, align 8, !tbaa !1
  %20 = fadd contract double %16, %19
  store double %20, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopVectorizePass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i64 %8, 4
  br i1 %min.iters.check, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.mod.vf = urem i64 %8, 4
  %n.vec = sub i64 %8, %n.mod.vf
  %ind.end = add i64 1, %n.vec
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 1, %index
  %13 = add i64 %offset.idx, 0
  %14 = add i64 %offset.idx, 2
  %15 = add nsw i64 %13, -1
  %16 = add nsw i64 %14, -1
  %17 = getelementptr double, ptr %7, i64 %15
  %18 = getelementptr double, ptr %7, i64 %16
  %19 = getelementptr double, ptr %17, i32 0
  store <2 x double> %broadcast.splat, ptr %19, align 8, !tbaa !1
  %20 = getelementptr double, ptr %17, i32 2
  store <2 x double> %broadcast.splat317, ptr %20, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %21 = icmp eq i64 %index.next, %n.vec
  br i1 %21, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %8, %n.vec
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %.lr.ph, %middle.block
  %bc.resume.val = phi i64 [ %ind.end, %middle.block ], [ 1, %.lr.ph ]
  br label %22

22:                                               ; preds = %scalar.ph, %22
  %indvars.iv = phi i64 [ %bc.resume.val, %scalar.ph ], [ %indvars.iv.next, %22 ]
  %23 = add nsw i64 %indvars.iv, -1
  %24 = getelementptr double, ptr %7, i64 %23
  store double %12, ptr %24, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %22, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %middle.block, %22
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %25 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %26 = add nsw i64 %8, -1
  %27 = getelementptr double, ptr %7, i64 %26
  %28 = load double, ptr %27, align 8, !tbaa !1
  %29 = fadd contract double %25, %28
  store double %29, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopLoadEliminationPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i64 %8, 4
  br i1 %min.iters.check, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.mod.vf = urem i64 %8, 4
  %n.vec = sub i64 %8, %n.mod.vf
  %ind.end = add i64 1, %n.vec
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %offset.idx = add i64 1, %index
  %13 = add i64 %offset.idx, 0
  %14 = add i64 %offset.idx, 2
  %15 = add nsw i64 %13, -1
  %16 = add nsw i64 %14, -1
  %17 = getelementptr double, ptr %7, i64 %15
  %18 = getelementptr double, ptr %7, i64 %16
  %19 = getelementptr double, ptr %17, i32 0
  store <2 x double> %broadcast.splat, ptr %19, align 8, !tbaa !1
  %20 = getelementptr double, ptr %17, i32 2
  store <2 x double> %broadcast.splat317, ptr %20, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %21 = icmp eq i64 %index.next, %n.vec
  br i1 %21, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %8, %n.vec
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %.lr.ph, %middle.block
  %bc.resume.val = phi i64 [ %ind.end, %middle.block ], [ 1, %.lr.ph ]
  br label %22

22:                                               ; preds = %scalar.ph, %22
  %indvars.iv = phi i64 [ %bc.resume.val, %scalar.ph ], [ %indvars.iv.next, %22 ]
  %23 = add nsw i64 %indvars.iv, -1
  %24 = getelementptr double, ptr %7, i64 %23
  store double %12, ptr %24, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %22, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %22
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %25 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %26 = add nsw i64 %8, -1
  %27 = getelementptr double, ptr %7, i64 %26
  %28 = load double, ptr %27, align 8, !tbaa !1
  %29 = fadd contract double %25, %28
  store double %29, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %.lr.ph, %middle.block
  %bc.resume.val = phi i64 [ %ind.end, %middle.block ], [ 1, %.lr.ph ]
  br label %16

16:                                               ; preds = %scalar.ph, %16
  %indvars.iv = phi i64 [ %bc.resume.val, %scalar.ph ], [ %indvars.iv.next, %16 ]
  %17 = add nsw i64 %indvars.iv, -1
  %18 = getelementptr double, ptr %7, i64 %17
  store double %12, ptr %18, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %16, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %16
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %19 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %20 = add nsw i64 %8, -1
  %21 = getelementptr double, ptr %7, i64 %20
  %22 = load double, ptr %21, align 8, !tbaa !1
  %23 = fadd contract double %19, %22
  store double %23, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %.lr.ph, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %ind.end, %middle.block ], [ 1, %.lr.ph ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After VectorCombinePass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %.lr.ph, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %ind.end, %middle.block ], [ 1, %.lr.ph ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph

scalar.ph:                                        ; preds = %middle.block, %.lr.ph, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %ind.end, %middle.block ], [ 1, %.lr.ph ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopUnrollPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After WarnMissedTransformationsPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After SROAPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InstCombinePass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopSimplifyPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LCSSAPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LICMPass on vector.body ***

; Preheader:
vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

; Loop:
vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !5

; Exit blocks
middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader
*** IR Dump After LICMPass on scalar.ph ***

; Preheader:
scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

; Loop:
scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !8

; Exit blocks
._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit
*** IR Dump After AlignmentFromAssumptionsPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After LoopSinkPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After InstSimplifyPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After DivRemPairsPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After TailCallElimPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit.loopexit:                    ; preds = %scalar.ph
  br label %._crit_edge.loopexit

._crit_edge.loopexit:                             ; preds = %._crit_edge.loopexit.loopexit, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After SimplifyCFGPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
*** IR Dump After GlobalDCEPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = distinct !{!5, !6, !7}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !6, !7}
!9 = distinct !{!9, !7, !6}
*** IR Dump After ConstantMergePass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = distinct !{!5, !6, !7}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !6, !7}
!9 = distinct !{!9, !7, !6}
*** IR Dump After CGProfilePass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = distinct !{!5, !6, !7}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !6, !7}
!9 = distinct !{!9, !7, !6}
*** IR Dump After RelLookupTableConverterPass on [module] ***
; ModuleID = 'FIRModule'
source_filename = "FIRModule"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@_QQcl.28612C69372C612C6531332E36653229 = internal constant [16 x i8] c"(a,i7,a,e13.6e2)"
@_QQcl.21557d42704c5c1f18a68415065290ee = internal constant [50 x i8] c"/g/g92/rydahl1/flangtests/src/parallel_region.f90\00"
@_QQcl.54686520726573756C74206F6620286172722831292B61727228 = internal constant [26 x i8] c"The result of (arr(1)+arr("
@_QQcl.2920697320 = internal constant [5 x i8] c") is "
@_QQEnvironmentDefaults = local_unnamed_addr constant ptr null

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #0

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare void @free(ptr allocptr nocapture noundef) local_unnamed_addr #1

define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}

; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}

declare ptr @_FortranAioBeginExternalFormattedOutput(ptr, i64, ptr, i32, ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputAscii(ptr, ptr, i64) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputInteger32(ptr, i32) local_unnamed_addr

declare zeroext i1 @_FortranAioOutputReal64(ptr, double) local_unnamed_addr

declare i32 @_FortranAioEndIoStatement(ptr) local_unnamed_addr

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #3

attributes #0 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #1 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" }
attributes #2 = { nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{!2, !2, i64 0}
!2 = !{!"any data access", !3, i64 0}
!3 = !{!"any access", !4, i64 0}
!4 = !{!"Flang Type TBAA Root"}
!5 = distinct !{!5, !6, !7}
!6 = !{!"llvm.loop.isvectorized", i32 1}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
!8 = distinct !{!8, !6, !7}
!9 = distinct !{!9, !7, !6}
*** IR Dump After AnnotationRemarksPass on _QQmain ***
define void @_QQmain() local_unnamed_addr {
.lr.ph.i:
  %0 = tail call dereferenceable_or_null(8388608) ptr @malloc(i64 8388608)
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %.lr.ph.i
  %index = phi i64 [ 0, %.lr.ph.i ], [ %index.next.3, %vector.body ]
  %1 = getelementptr double, ptr %0, i64 %index
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %1, align 8, !tbaa !1
  %2 = getelementptr double, ptr %1, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %2, align 8, !tbaa !1
  %index.next = or i64 %index, 4
  %3 = getelementptr double, ptr %0, i64 %index.next
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %3, align 8, !tbaa !1
  %4 = getelementptr double, ptr %3, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %4, align 8, !tbaa !1
  %index.next.1 = or i64 %index, 8
  %5 = getelementptr double, ptr %0, i64 %index.next.1
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %5, align 8, !tbaa !1
  %6 = getelementptr double, ptr %5, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %6, align 8, !tbaa !1
  %index.next.2 = or i64 %index, 12
  %7 = getelementptr double, ptr %0, i64 %index.next.2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %7, align 8, !tbaa !1
  %8 = getelementptr double, ptr %7, i64 2
  store <2 x double> <double 0x3EB0000000000000, double 0x3EB0000000000000>, ptr %8, align 8, !tbaa !1
  %index.next.3 = add nuw nsw i64 %index, 16
  %9 = icmp eq i64 %index.next.3, 1048576
  br i1 %9, label %_QFPomp_subroutine.exit, label %vector.body, !llvm.loop !5

_QFPomp_subroutine.exit:                          ; preds = %vector.body
  %.pre.i = load double, ptr %0, align 8, !tbaa !1
  %10 = getelementptr double, ptr %0, i64 1048575
  %11 = load double, ptr %10, align 8, !tbaa !1
  %12 = fadd contract double %.pre.i, %11
  tail call void @free(ptr nonnull %0)
  %13 = tail call ptr @_FortranAioBeginExternalFormattedOutput(ptr nonnull @_QQcl.28612C69372C612C6531332E36653229, i64 16, ptr null, i32 -1, ptr nonnull @_QQcl.21557d42704c5c1f18a68415065290ee, i32 10)
  %14 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.54686520726573756C74206F6620286172722831292B61727228, i64 26)
  %15 = tail call i1 @_FortranAioOutputInteger32(ptr %13, i32 1048576)
  %16 = tail call i1 @_FortranAioOutputAscii(ptr %13, ptr nonnull @_QQcl.2920697320, i64 5)
  %17 = tail call i1 @_FortranAioOutputReal64(ptr %13, double %12)
  %18 = tail call i32 @_FortranAioEndIoStatement(ptr %13)
  ret void
}
*** IR Dump After AnnotationRemarksPass on _QFPomp_subroutine ***
; Function Attrs: nounwind
define void @_QFPomp_subroutine(ptr nocapture readonly %0, ptr nocapture writeonly %1) local_unnamed_addr #2 {
  %3 = load i32, ptr %0, align 4, !tbaa !1
  %4 = tail call i32 @llvm.smax.i32(i32 %3, i32 0)
  %5 = zext i32 %4 to i64
  %6 = shl nuw nsw i64 %5, 3
  %7 = tail call ptr @malloc(i64 %6)
  %8 = sext i32 %3 to i64
  %9 = icmp sgt i32 %3, 0
  br i1 %9, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %10 = sitofp i32 %3 to float
  %11 = fdiv contract float 1.000000e+00, %10
  %12 = fpext float %11 to double
  %min.iters.check = icmp ult i32 %3, 4
  br i1 %min.iters.check, label %scalar.ph.preheader, label %vector.ph

vector.ph:                                        ; preds = %.lr.ph
  %n.vec = and i64 %8, -4
  %ind.end = or i64 %n.vec, 1
  %broadcast.splatinsert = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat = shufflevector <2 x double> %broadcast.splatinsert, <2 x double> poison, <2 x i32> zeroinitializer
  %broadcast.splatinsert316 = insertelement <2 x double> poison, double %12, i64 0
  %broadcast.splat317 = shufflevector <2 x double> %broadcast.splatinsert316, <2 x double> poison, <2 x i32> zeroinitializer
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %13 = getelementptr double, ptr %7, i64 %index
  store <2 x double> %broadcast.splat, ptr %13, align 8, !tbaa !1
  %14 = getelementptr double, ptr %13, i64 2
  store <2 x double> %broadcast.splat317, ptr %14, align 8, !tbaa !1
  %index.next = add nuw i64 %index, 4
  %15 = icmp eq i64 %index.next, %n.vec
  br i1 %15, label %middle.block, label %vector.body, !llvm.loop !8

middle.block:                                     ; preds = %vector.body
  %cmp.n = icmp eq i64 %n.vec, %8
  br i1 %cmp.n, label %._crit_edge.loopexit, label %scalar.ph.preheader

scalar.ph.preheader:                              ; preds = %.lr.ph, %middle.block
  %indvars.iv.ph = phi i64 [ 1, %.lr.ph ], [ %ind.end, %middle.block ]
  br label %scalar.ph

scalar.ph:                                        ; preds = %scalar.ph.preheader, %scalar.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %scalar.ph ], [ %indvars.iv.ph, %scalar.ph.preheader ]
  %16 = add nsw i64 %indvars.iv, -1
  %17 = getelementptr double, ptr %7, i64 %16
  store double %12, ptr %17, align 8, !tbaa !1
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv, %8
  br i1 %exitcond.not, label %._crit_edge.loopexit, label %scalar.ph, !llvm.loop !9

._crit_edge.loopexit:                             ; preds = %scalar.ph, %middle.block
  %.pre = load double, ptr %7, align 8, !tbaa !1
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %2
  %18 = phi double [ %.pre, %._crit_edge.loopexit ], [ undef, %2 ]
  %19 = add nsw i64 %8, -1
  %20 = getelementptr double, ptr %7, i64 %19
  %21 = load double, ptr %20, align 8, !tbaa !1
  %22 = fadd contract double %18, %21
  store double %22, ptr %1, align 8, !tbaa !1
  tail call void @free(ptr %7)
  ret void
}
